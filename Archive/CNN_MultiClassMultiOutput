{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"TPU","colab":{"name":"CNN_MultiClassMultiOutput","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMkg9cdJ6FsKsxCysXOE10p"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"ZqHOqqVgJwu6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616756721971,"user_tz":-180,"elapsed":514,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"e8ec6374-6244-4a2a-ff6b-dd972ecd5303"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","!ls /content/gdrive"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","MyDrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SvU3I4qIujf0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616756723136,"user_tz":-180,"elapsed":792,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"3cf96032-2862-4256-e95d-1f39dc22cc77"},"source":["!curl ipecho.net/plain"],"execution_count":10,"outputs":[{"output_type":"stream","text":["35.238.214.208"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VZrXvU8t8eyj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616756723988,"user_tz":-180,"elapsed":438,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"aef05c57-a887-4534-91e1-054dce1ab26d"},"source":["%cd /content/gdrive/My\\ Drive/Thesis/MovieLens20M"],"execution_count":11,"outputs":[{"output_type":"stream","text":["/content/gdrive/My Drive/Thesis/MovieLens20M\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q3daQ8HNLFDt","executionInfo":{"status":"ok","timestamp":1616756728076,"user_tz":-180,"elapsed":3477,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"c924981e-cd92-4cbb-a841-b70c65ee6345"},"source":["pip uninstall keras-preprocessing"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Uninstalling Keras-Preprocessing-1.1.2:\n","  Would remove:\n","    /usr/local/lib/python3.7/dist-packages/Keras_Preprocessing-1.1.2.dist-info/*\n","    /usr/local/lib/python3.7/dist-packages/keras_preprocessing/*\n","Proceed (y/n)? y\n","  Successfully uninstalled Keras-Preprocessing-1.1.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":314},"id":"saIezMoALOEo","executionInfo":{"status":"ok","timestamp":1616756733681,"user_tz":-180,"elapsed":4899,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"a8cbd1aa-768d-4547-c8a8-a548e39220eb"},"source":["pip install git+https://github.com/keras-team/keras-preprocessing.git"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Collecting git+https://github.com/keras-team/keras-preprocessing.git\n","  Cloning https://github.com/keras-team/keras-preprocessing.git to /tmp/pip-req-build-bwgip62o\n","  Running command git clone -q https://github.com/keras-team/keras-preprocessing.git /tmp/pip-req-build-bwgip62o\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.7/dist-packages (from Keras-Preprocessing==1.1.2) (1.19.5)\n","Building wheels for collected packages: Keras-Preprocessing\n","  Building wheel for Keras-Preprocessing (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for Keras-Preprocessing: filename=Keras_Preprocessing-1.1.2-cp37-none-any.whl size=43617 sha256=d37d8892df7b9610609381fe54eab62ae8e83ecaf6ad80cf6fd2ed7972347b72\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-y6fhf1y3/wheels/03/a0/39/171f6040d36f36c71168dc69afa81334351b20955dc36ce932\n","Successfully built Keras-Preprocessing\n","Installing collected packages: Keras-Preprocessing\n","Successfully installed Keras-Preprocessing-1.1.2\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["keras_preprocessing"]}}},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BzNHSLuXh_YN","executionInfo":{"status":"ok","timestamp":1616756738963,"user_tz":-180,"elapsed":9081,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"c3c7630d-2a34-4c40-e327-340f2f4cca4d"},"source":["pip install git+https://github.com/keras-team/keras-tuner.git@1.0.2rc0#egg=keras-tuner-1.0.2rc0"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Collecting keras-tuner-1.0.2rc0\n","  Cloning https://github.com/keras-team/keras-tuner.git (to revision 1.0.2rc0) to /tmp/pip-install-dlig1o9r/keras-tuner-1.0.2rc0\n","  Running command git clone -q https://github.com/keras-team/keras-tuner.git /tmp/pip-install-dlig1o9r/keras-tuner-1.0.2rc0\n","  Running command git checkout -q 5d16a5a9cd883fe6366d523a5e59b72cfefb7f77\n","  WARNING: Generating metadata for package keras-tuner-1.0.2rc0 produced metadata for project name keras-tuner. Fix your #egg=keras-tuner-1.0.2rc0 fragments.\n","Requirement already satisfied (use --upgrade to upgrade): keras-tuner from git+https://github.com/keras-team/keras-tuner.git@1.0.2rc0#egg=keras-tuner-1.0.2rc0 in /usr/local/lib/python3.7/dist-packages\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (20.9)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.16.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.19.5)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.8.9)\n","Requirement already satisfied: terminaltables in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (3.1.0)\n","Requirement already satisfied: colorama in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.4.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (4.41.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (2.23.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.4.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.22.2.post1)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->keras-tuner) (2.4.7)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2020.12.5)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->keras-tuner) (1.0.1)\n","Building wheels for collected packages: keras-tuner, keras-tuner\n","  Building wheel for keras-tuner (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-tuner: filename=keras_tuner-1.0.2rc0-cp37-none-any.whl size=89059 sha256=b42f4368322bea3a676e6aa036353d37bde2dcb827851c86775aa48c52fd32ef\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-v7yjr6rm/wheels/ab/97/20/917008aafbd47b823fb0bc43989739b1195c682036641a49d7\n","  Building wheel for keras-tuner (setup.py) ... \u001b[?25lerror\n","  ERROR: Failed building wheel for keras-tuner\n","\u001b[?25h  Running setup.py clean for keras-tuner\n","  ERROR: Failed cleaning build dir for keras-tuner\n","Successfully built keras-tuner\n","Failed to build keras-tuner\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SZ_wT5rp27J2","executionInfo":{"status":"ok","timestamp":1616756738963,"user_tz":-180,"elapsed":7657,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}}},"source":["import glob\n","import os\n","from keras.models import Sequential\n","from keras import Input, Model\n","import tensorflow as tf\n","\"\"\"Import from keras_preprocessing not from keras.preprocessing, because Keras may or maynot contain the features discussed here depending upon when you read this article, until the keras_preprocessed library is updated in Keras use the github version.\"\"\"\n","from keras_preprocessing.image import ImageDataGenerator\n","from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization\n","from keras.layers import Conv2D, MaxPooling2D\n","from keras import regularizers, optimizers\n","import pandas as pd\n","import numpy as np\n","import keras\n","from keras.callbacks import ModelCheckpoint\n","import sklearn\n","import matplotlib.pyplot as plt\n","import kerastuner as kt"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dLbwO_ZxLXsw","executionInfo":{"status":"ok","timestamp":1616756755791,"user_tz":-180,"elapsed":1304,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"4ae9a032-37c1-40b2-973f-def7aefc59f7"},"source":["df = pd.read_csv(\"trial.csv\")\n","#Drop empty columns(unnamed ranges)\n","df.drop(df.columns[df.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)\n","#Save back to trial\n","df.to_csv(\"trial.csv\")\n","#Split Genres\n","df[\"Genres\"]=df[\"Genres\"].apply(lambda x:x.strip('][').replace('\\'','').replace(' ','').split(\",\"))\n","main_genre = ['Adventure', 'Comedy', 'Fantasy', 'Romance', 'Action','Horror']\n","main_set = set(main_genre)\n","df['Genres_subset'] = df['Genres'].apply(lambda x: list(set(x).intersection(main_set))  )\n","df = df[df['Genres_subset'].map(lambda d: len(d)) > 0]\n","df.to_csv(\"latest_trial.csv\")\n","print(df)"],"execution_count":17,"outputs":[{"output_type":"stream","text":["          ID_Frame           Genres  Parent Genres_subset\n","0      5455_16.png  [Comedy, Drama]    5455      [Comedy]\n","1      5455_15.png  [Comedy, Drama]    5455      [Comedy]\n","2      5455_17.png  [Comedy, Drama]    5455      [Comedy]\n","3      5455_18.png  [Comedy, Drama]    5455      [Comedy]\n","4      5455_19.png  [Comedy, Drama]    5455      [Comedy]\n","...            ...              ...     ...           ...\n","74060  2477_10.png      [Adventure]    2477   [Adventure]\n","74089   2172_0.png  [Comedy, Drama]    2172      [Comedy]\n","74090   2172_1.png  [Comedy, Drama]    2172      [Comedy]\n","74091   2172_2.png  [Comedy, Drama]    2172      [Comedy]\n","74092   2172_3.png  [Comedy, Drama]    2172      [Comedy]\n","\n","[51465 rows x 4 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"51qFfI46Lsyd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616756765728,"user_tz":-180,"elapsed":7453,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"54bc88df-c2bd-469b-c8a8-e73f0f8eef68"},"source":["\n","num_classes = len(main_genre)\n","datagen=ImageDataGenerator(rescale=1./255.)\n","test_datagen=ImageDataGenerator(rescale=1./255.)\n","train_generator=datagen.flow_from_dataframe(\n","    dataframe=df[:30000],\n","    directory=\"VisualDataset\",\n","    x_col=\"ID_Frame\",\n","    y_col=\"Genres_subset\",\n","    color_mode=\"rgb\",\n","    batch_size=64,\n","    seed=42,\n","    shuffle=True,\n","    class_mode=\"categorical\",\n","    classes=main_genre,\n","    target_size=(100,100))\n","\n","valid_generator=test_datagen.flow_from_dataframe(\n","    dataframe=df[30000:45000],\n","    directory=\"VisualDataset\",\n","    x_col=\"ID_Frame\",\n","    y_col=\"Genres_subset\",\n","    color_mode=\"rgb\",\n","    batch_size=64,\n","    seed=42,\n","    shuffle=True,\n","    class_mode=\"categorical\",\n","    classes=main_genre,\n","    target_size=(100,100))\n","\n","test_generator=test_datagen.flow_from_dataframe(\n","    dataframe=df[35000:36000],\n","    directory=\"VisualDataset\",\n","    x_col=\"ID_Frame\",\n","    color_mode=\"rgb\",\n","    batch_size=1,\n","    seed=42,\n","    shuffle=False,\n","    class_mode=None,\n","    target_size=(100,100))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Found 30000 validated image filenames belonging to 6 classes.\n","Found 15000 validated image filenames belonging to 6 classes.\n","Found 1000 validated image filenames.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g48MYxTSdBm1","executionInfo":{"status":"ok","timestamp":1616756766343,"user_tz":-180,"elapsed":612,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}}},"source":["def old_generator_wrapper(generator):\n","    for batch_x,batch_y in generator:\n","        yield (batch_x,[batch_y[:,i] for i in range(num_classes)])\n","def generator_wrapper(generator):\n","    for batch_x,batch_y in generator:\n","        yield (batch_x,np.array([batch_y[:,i] for i in range(num_classes)]).transpose())"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ronu1OQHNmGQ","executionInfo":{"status":"ok","timestamp":1616756775523,"user_tz":-180,"elapsed":418,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"2e84b706-c2d5-4b2f-8d84-60cd30ec6148"},"source":["from collections import Counter\n","\n","counter = Counter([x for main_genre in train_generator.classes for x in main_genre])                          \n","max_val = float(max(counter.values())) \n","\n","num_data = 1600\n","class_weights = {class_id : max_val/num_images for class_id, num_images in counter.items()}     \n","print(\"Class weights are:\" ,class_weights)\n"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Class weights are: {1: 1.0, 3: 2.1486793524566883, 4: 1.8201611933116806, 5: 4.145479452054794, 0: 2.6971479500891267, 2: 5.139605978260869}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7XV6nCZD-OHn","executionInfo":{"status":"ok","timestamp":1616756779906,"user_tz":-180,"elapsed":444,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}}},"source":["import keras.backend as K\n","import tensorflow as tf\n","def custom_hamming_loss(y_true, y_pred):\n","    # Avoid divide by 0\n","    y_pred = K.clip(y_pred, K.epsilon(), 1 - K.epsilon())\n","    # Multi-task loss\n","    return K.mean(K.sum(- y_true * K.log(y_pred) - (1 - y_true) * K.log(1 - y_pred), axis=1))\n","\n","def f1_loss(y_true, y_pred):\n","    \n","    tp = K.sum(K.cast(y_true*y_pred, 'float'), axis=0)\n","    tn = K.sum(K.cast((1-y_true)*(1-y_pred), 'float'), axis=0)\n","    fp = K.sum(K.cast((1-y_true)*y_pred, 'float'), axis=0)\n","    fn = K.sum(K.cast(y_true*(1-y_pred), 'float'), axis=0)\n","\n","    p = tp / (tp + fp + K.epsilon())\n","    r = tp / (tp + fn + K.epsilon())\n","\n","    f1 = 2*p*r / (p+r+K.epsilon())\n","    f1 = tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)\n","    return 1 - K.mean(f1)"],"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jfqG1Aia-qn1"},"source":["# define roc_callback, inspired by https://github.com/keras-team/keras/issues/6050#issuecomment-329996505"]},{"cell_type":"code","metadata":{"id":"PCSLHOcTVuOV","executionInfo":{"status":"ok","timestamp":1616756782111,"user_tz":-180,"elapsed":540,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}}},"source":["\n","def auc_roc(y_true, y_pred):\n","    # any tensorflow metric\n","    value, update_op =  tf.keras.metrics.AUC(y_pred, y_true)\n","\n","    # find all variables created for this metric\n","    metric_vars = [i for i in tf.local_variables() if 'auc_roc' in i.name.split('/')[1]]\n","\n","    # Add metric variables to GLOBAL_VARIABLES collection.\n","    # They will be initialized for new session.\n","    for v in metric_vars:\n","        tf.add_to_collection(tf.GraphKeys.GLOBAL_VARIABLES, v)\n","\n","    # force to update metric values\n","    with tf.control_dependencies([update_op]):\n","        value = tf.identity(value)\n","        return value\n"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"id":"l21TRQsXIUQt","executionInfo":{"status":"ok","timestamp":1616756783119,"user_tz":-180,"elapsed":762,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}}},"source":["def recall_m(y_true, y_pred):\n","    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","    recall = true_positives / (possible_positives + K.epsilon())\n","    return recall\n","\n","def precision_m(y_true, y_pred):\n","    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n","    precision = true_positives / (predicted_positives + K.epsilon())\n","    return precision\n","\n","def f1_m(y_true, y_pred):\n","    precision = precision_m(y_true, y_pred)\n","    recall = recall_m(y_true, y_pred)\n","    return 2*((precision*recall)/(precision+recall+K.epsilon()))\n"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"gkqkyNUNtqtO","colab":{"base_uri":"https://localhost:8080/","height":542},"executionInfo":{"status":"ok","timestamp":1616756787408,"user_tz":-180,"elapsed":2974,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"f8910282-28bb-4471-de85-c86d93bb1001"},"source":["import plotly.graph_objects as go\n","def plot_distribution(pd_series):\n","    labels = pd_series.value_counts().index.tolist()\n","    counts = pd_series.value_counts().values.tolist()\n","        \n","    pie_plot = go.Pie(labels=labels, values=counts, hole=.3)\n","    fig = go.Figure(data=[pie_plot])\n","    fig.update_layout(title_text='Distribution for %s' % pd_series.name)\n","        \n","    fig.show()\n","plot_distribution(df['Genres_subset'])"],"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>\n","            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n","                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n","            <div id=\"b174d328-ba14-43e6-abc1-e32547f270f3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n","            <script type=\"text/javascript\">\n","                \n","                    window.PLOTLYENV=window.PLOTLYENV || {};\n","                    \n","                if (document.getElementById(\"b174d328-ba14-43e6-abc1-e32547f270f3\")) {\n","                    Plotly.newPlot(\n","                        'b174d328-ba14-43e6-abc1-e32547f270f3',\n","                        [{\"hole\": 0.3, \"labels\": [[\"Comedy\"], [\"Action\"], [\"Romance\"], [\"Horror\"], [\"Romance\", \"Comedy\"], [\"Action\", \"Adventure\"], [\"Adventure\"], [\"Action\", \"Comedy\"], [\"Adventure\", \"Comedy\"], [\"Fantasy\", \"Comedy\"], [\"Horror\", \"Comedy\"], [\"Fantasy\"], [\"Fantasy\", \"Adventure\"], [\"Action\", \"Fantasy\", \"Adventure\"], [\"Action\", \"Romance\"], [\"Action\", \"Adventure\", \"Comedy\"], [\"Fantasy\", \"Adventure\", \"Comedy\"], [\"Action\", \"Horror\"], [\"Romance\", \"Fantasy\"], [\"Romance\", \"Action\"], [\"Romance\", \"Adventure\"], [\"Romance\", \"Fantasy\", \"Comedy\"], [\"Romance\", \"Adventure\", \"Comedy\"], [\"Horror\", \"Fantasy\"], [\"Action\", \"Horror\", \"Comedy\"], [\"Action\", \"Fantasy\", \"Adventure\", \"Comedy\"], [\"Action\", \"Fantasy\"], [\"Romance\", \"Fantasy\", \"Adventure\"], [\"Horror\", \"Fantasy\", \"Comedy\"], [\"Horror\", \"Action\"], [\"Action\", \"Romance\", \"Adventure\"], [\"Horror\", \"Fantasy\", \"Romance\"], [\"Action\", \"Romance\", \"Comedy\"], [\"Action\", \"Romance\", \"Adventure\", \"Comedy\"], [\"Action\", \"Adventure\", \"Horror\"], [\"Action\", \"Fantasy\", \"Comedy\"], [\"Action\", \"Horror\", \"Comedy\", \"Fantasy\", \"Adventure\"], [\"Action\", \"Fantasy\", \"Adventure\", \"Horror\"], [\"Action\", \"Romance\", \"Comedy\", \"Fantasy\", \"Adventure\"], [\"Romance\", \"Fantasy\", \"Adventure\", \"Comedy\"], [\"Horror\", \"Romance\"], [\"Horror\", \"Romance\", \"Comedy\"], [\"Action\", \"Fantasy\", \"Horror\"], [\"Romance\", \"Action\", \"Adventure\"], [\"Horror\", \"Adventure\"]], \"type\": \"pie\", \"values\": [15453, 6892, 4874, 4574, 4560, 2571, 2217, 1703, 1029, 873, 799, 715, 577, 484, 480, 338, 298, 294, 266, 255, 245, 231, 218, 206, 141, 117, 114, 112, 86, 76, 75, 74, 71, 69, 64, 58, 47, 39, 36, 35, 32, 31, 27, 6, 3]}],\n","                        {\"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Distribution for Genres_subset\"}},\n","                        {\"responsive\": true}\n","                    ).then(function(){\n","                            \n","var gd = document.getElementById('b174d328-ba14-43e6-abc1-e32547f270f3');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })\n","                };\n","                \n","            </script>\n","        </div>\n","</body>\n","</html>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"q6TvwF5EiNmT","executionInfo":{"status":"ok","timestamp":1616756787410,"user_tz":-180,"elapsed":1794,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}}},"source":["def model_builder(hp):\n","    model = keras.Sequential()\n","    model.add(keras.layers.InputLayer(input_shape=(100,100,3)))\n","\n","    # Tune the number of units in the first Dense layer\n","    # Choose an optimal value between 32-512\n","    hp_units = hp.Int('units', min_value=32, max_value=512, step=128)\n","    model.add(tf.keras.layers.Conv2D(32, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(32, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.25))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","\n","    model.add(tf.keras.layers.Conv2D(64, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(64, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.25))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    \n","    model.add(tf.keras.layers.Flatten())\n","    model.add(tf.keras.layers.Dense(512))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.5))\n","    model.add(tf.keras.layers.Dense(units=hp_units, activation='relu'))\n","    model.add(tf.keras.layers.Dense(num_classes, activation='sigmoid', name='category_output'))\n","    metrics_array=['accuracy',f1_m,precision_m,recall_m]\n","    loss_array = custom_hamming_loss\n","\n","    # Tune the learning rate for the optimizer\n","    # Choose an optimal value from 0.01, 0.001, or 0.0001\n","    hp_learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])\n","\n","    model.compile(optimizer=keras.optimizers.Adam(learning_rate=hp_learning_rate),\n","                  loss = custom_hamming_loss,\n","                  metrics =metrics_array,)\n","    print(model.summary())\n","    return model"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"6_LJbeamAN_M","executionInfo":{"status":"ok","timestamp":1616756788378,"user_tz":-180,"elapsed":381,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}}},"source":["def model_builder2(hp):\n","    model = keras.Sequential()\n","    model.add(keras.layers.InputLayer(input_shape=(100,100,3)))\n","\n","    # Tune the number of units in the first Dense layer\n","    # Choose an optimal value between 32-512\n","    hp_units = hp.Int('units', min_value=32, max_value=512, step=128)\n","    model.add(tf.keras.layers.Conv2D(32, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(32, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.25))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","\n","    model.add(tf.keras.layers.Conv2D(64, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(64, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    model.add(tf.keras.layers.Conv2D(128, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(128, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    \n","    model.add(tf.keras.layers.Conv2D(256, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(256, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    model.add(tf.keras.layers.Conv2D(256, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(256, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    model.add(tf.keras.layers.Flatten())\n","    model.add(tf.keras.layers.Dense(2048))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.5))\n","    model.add(tf.keras.layers.Dense(2048))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.5))\n","\n","    model.add(tf.keras.layers.Dense(units=hp_units, activation='relu'))\n","    model.add(tf.keras.layers.Dense(num_classes, activation='sigmoid', name='category_output'))\n","    metrics_array=['accuracy',f1_m,precision_m,recall_m]\n","    loss_array = custom_hamming_loss\n","\n","    # Tune the learning rate for the optimizer\n","    # Choose an optimal value from 0.01, 0.001, or 0.0001\n","    hp_learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])\n","\n","    model.compile(optimizer=keras.optimizers.Adam(learning_rate=hp_learning_rate),\n","                  loss = [custom_hamming_loss,f1_loss],\n","                  metrics =metrics_array,)\n","    print(model.summary())\n","    return model"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7nDnxImCX3uW","outputId":"ebdc23c9-3c5d-4cc2-9bf9-21da30b22bce"},"source":["filepath = \"Model_Checkpoints/weights-improvement-{epoch:02d}-{loss:.4f}-bigger.hdf5\"  \n","\n","checkpoint = ModelCheckpoint(\n","    filepath, monitor='loss', \n","    verbose=0,        \n","    save_best_only=True,        \n","    mode='min'\n",")    \n","callbacks_list = [checkpoint]     \n","\n","history = model.fit(train_generator,validation_data=valid_generator, epochs=20, callbacks=callbacks_list)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","469/469 [==============================] - ETA: 0s - loss: 3.0623 - accuracy: 0.4457 - f1_m: 0.2702 - precision_m: 0.4034 - recall_m: 0.2249 "],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1gpfIpUCkY0o","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616756807804,"user_tz":-180,"elapsed":1842,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"7ee4052f-aa8f-42c0-c1f4-6253cd9b4860"},"source":["tuner = kt.Hyperband(model_builder2,\n","                     objective='val_accuracy',\n","                     max_epochs=10,\n","                     factor=3,\n","                     directory='vgg16',\n","                     project_name='project_vgg16')\n"],"execution_count":29,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (None, 100, 100, 32)      896       \n","_________________________________________________________________\n","activation (Activation)      (None, 100, 100, 32)      0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 98, 98, 32)        9248      \n","_________________________________________________________________\n","activation_1 (Activation)    (None, 98, 98, 32)        0         \n","_________________________________________________________________\n","dropout (Dropout)            (None, 98, 98, 32)        0         \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 49, 49, 32)        0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 49, 49, 64)        18496     \n","_________________________________________________________________\n","activation_2 (Activation)    (None, 49, 49, 64)        0         \n","_________________________________________________________________\n","conv2d_3 (Conv2D)            (None, 47, 47, 64)        36928     \n","_________________________________________________________________\n","activation_3 (Activation)    (None, 47, 47, 64)        0         \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 23, 23, 64)        0         \n","_________________________________________________________________\n","conv2d_4 (Conv2D)            (None, 23, 23, 128)       73856     \n","_________________________________________________________________\n","activation_4 (Activation)    (None, 23, 23, 128)       0         \n","_________________________________________________________________\n","conv2d_5 (Conv2D)            (None, 21, 21, 128)       147584    \n","_________________________________________________________________\n","activation_5 (Activation)    (None, 21, 21, 128)       0         \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 10, 10, 128)       0         \n","_________________________________________________________________\n","conv2d_6 (Conv2D)            (None, 10, 10, 256)       295168    \n","_________________________________________________________________\n","activation_6 (Activation)    (None, 10, 10, 256)       0         \n","_________________________________________________________________\n","conv2d_7 (Conv2D)            (None, 8, 8, 256)         590080    \n","_________________________________________________________________\n","activation_7 (Activation)    (None, 8, 8, 256)         0         \n","_________________________________________________________________\n","max_pooling2d_3 (MaxPooling2 (None, 4, 4, 256)         0         \n","_________________________________________________________________\n","conv2d_8 (Conv2D)            (None, 4, 4, 256)         590080    \n","_________________________________________________________________\n","activation_8 (Activation)    (None, 4, 4, 256)         0         \n","_________________________________________________________________\n","conv2d_9 (Conv2D)            (None, 2, 2, 256)         590080    \n","_________________________________________________________________\n","activation_9 (Activation)    (None, 2, 2, 256)         0         \n","_________________________________________________________________\n","max_pooling2d_4 (MaxPooling2 (None, 1, 1, 256)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 256)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 2048)              526336    \n","_________________________________________________________________\n","activation_10 (Activation)   (None, 2048)              0         \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 2048)              0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 2048)              4196352   \n","_________________________________________________________________\n","activation_11 (Activation)   (None, 2048)              0         \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 2048)              0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 32)                65568     \n","_________________________________________________________________\n","category_output (Dense)      (None, 6)                 198       \n","=================================================================\n","Total params: 7,140,870\n","Trainable params: 7,140,870\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0q6vXsTKQPKp","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"1f4566f5-da76-43a3-d09b-3ea00d1b7a24"},"source":["# Fit the model\n","STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n","STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n","STEP_SIZE_TEST=test_generator.n//test_generator.batch_size\n"," \t\n","stop_early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\n","tuner.search(generator_wrapper(train_generator),\n","                    steps_per_epoch=STEP_SIZE_TRAIN,\n","                    validation_data=generator_wrapper(valid_generator),\n","                    validation_steps=STEP_SIZE_VALID,\n","                    epochs=10, callbacks=[stop_early],\n","                    use_multiprocessing=True,class_weight=class_weights )\n","\n","# Get the optimal hyperparameters\n","best_hps=tuner.get_best_hyperparameters(num_trials=1)[0]\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<span style=\"color:#4527A0\"><h1 style=\"font-size:18px\">Starting new trial</h1></span>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (None, 100, 100, 32)      896       \n","_________________________________________________________________\n","activation (Activation)      (None, 100, 100, 32)      0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 98, 98, 32)        9248      \n","_________________________________________________________________\n","activation_1 (Activation)    (None, 98, 98, 32)        0         \n","_________________________________________________________________\n","dropout (Dropout)            (None, 98, 98, 32)        0         \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 49, 49, 32)        0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 49, 49, 64)        18496     \n","_________________________________________________________________\n","activation_2 (Activation)    (None, 49, 49, 64)        0         \n","_________________________________________________________________\n","conv2d_3 (Conv2D)            (None, 47, 47, 64)        36928     \n","_________________________________________________________________\n","activation_3 (Activation)    (None, 47, 47, 64)        0         \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 23, 23, 64)        0         \n","_________________________________________________________________\n","conv2d_4 (Conv2D)            (None, 23, 23, 128)       73856     \n","_________________________________________________________________\n","activation_4 (Activation)    (None, 23, 23, 128)       0         \n","_________________________________________________________________\n","conv2d_5 (Conv2D)            (None, 21, 21, 128)       147584    \n","_________________________________________________________________\n","activation_5 (Activation)    (None, 21, 21, 128)       0         \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 10, 10, 128)       0         \n","_________________________________________________________________\n","conv2d_6 (Conv2D)            (None, 10, 10, 256)       295168    \n","_________________________________________________________________\n","activation_6 (Activation)    (None, 10, 10, 256)       0         \n","_________________________________________________________________\n","conv2d_7 (Conv2D)            (None, 8, 8, 256)         590080    \n","_________________________________________________________________\n","activation_7 (Activation)    (None, 8, 8, 256)         0         \n","_________________________________________________________________\n","max_pooling2d_3 (MaxPooling2 (None, 4, 4, 256)         0         \n","_________________________________________________________________\n","conv2d_8 (Conv2D)            (None, 4, 4, 256)         590080    \n","_________________________________________________________________\n","activation_8 (Activation)    (None, 4, 4, 256)         0         \n","_________________________________________________________________\n","conv2d_9 (Conv2D)            (None, 2, 2, 256)         590080    \n","_________________________________________________________________\n","activation_9 (Activation)    (None, 2, 2, 256)         0         \n","_________________________________________________________________\n","max_pooling2d_4 (MaxPooling2 (None, 1, 1, 256)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 256)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 2048)              526336    \n","_________________________________________________________________\n","activation_10 (Activation)   (None, 2048)              0         \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 2048)              0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 2048)              4196352   \n","_________________________________________________________________\n","activation_11 (Activation)   (None, 2048)              0         \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 2048)              0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 160)               327840    \n","_________________________________________________________________\n","category_output (Dense)      (None, 6)                 966       \n","=================================================================\n","Total params: 7,403,910\n","Trainable params: 7,403,910\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/2\n","WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n","468/468 [==============================] - ETA: 0s - loss: 6.0351 - accuracy: 0.4450 - f1_m: 0.3150 - precision_m: 0.4956 - recall_m: 0.2413 WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ud5c0I7KNPvW"},"source":["model = tuner.hypermodel.build(best_hps)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5Ej-ooqPM9kU"},"source":["# Build the model with the optimal hyperparameters and train it on the data for 50 epochs\n","model = tuner.hypermodel.build(best_hps)\n","history = model.fit(generator_wrapper(train_generator),\n","                    steps_per_epoch=STEP_SIZE_TRAIN,\n","                    validation_data=generator_wrapper(valid_generator),\n","                    validation_steps=STEP_SIZE_VALID,\n","                    epochs=30, callbacks=[stop_early],\n","                   class_weight=class_weights, )\n","\n","val_acc_per_epoch = history.history['val_accuracy']\n","best_epoch = val_acc_per_epoch.index(max(val_acc_per_epoch)) + 1\n","print('Best epoch: %d' % (best_epoch,))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R5rUIIw6lUtE"},"source":["import plotly.graph_objects as go\n","import matplotlib.pyplot as plt\n","plt.clf()\n","fig = go.Figure()\n","fig.add_trace(go.Scatter(\n","                        y=history.history['loss'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_loss'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Loss for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='val_loss')\n","fig.show()\n","plt.clf()\n","fig = go.Figure()\n","\n","fig.add_trace(go.Scatter(\n","                        y=history.history['accuracy'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_accuracy'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Accuracy for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='Accuracy')\n","fig.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qRhPDnxLlr8E"},"source":["# Old Version"]},{"cell_type":"markdown","metadata":{"id":"tmci3CahlRge"},"source":["\n","\n","\n","```\n","# This is formatted as code\n","\n","\n","\n","output1 = []\n","output2 = []\n","import tensorflow as tf\n","tf.compat.v1.disable_eager_execution()\n","\n","inp = Input(shape = (48,48,3))\n","x = Conv2D(32, (3, 3), padding = 'same')(inp)\n","x = Activation('relu')(x)\n","x = Conv2D(32, (3, 3))(x)\n","x = Activation('relu')(x)\n","x = MaxPooling2D(pool_size = (2, 2))(x)\n","x = Conv2D(64, (3, 3), padding = 'same')(x)\n","x = Activation('relu')(x)\n","x = Conv2D(64, (3, 3))(x)\n","x = Activation('relu')(x)\n","x = MaxPooling2D(pool_size = (2, 2))(x)\n","x = Flatten()(x)\n","x = Dense(512)(x)\n","x = Activation('relu')(x)\n","x = Dropout(0.5)(x)\n","output2 = Dense(num_classes, activation='sigmoid', name='category_output')(x)\n","\n","loss_array = custom_hamming_loss\n","\n","metrics_array=['accuracy',f1_m,precision_m,recall_m]\n","\n","model = Model(inp,output2)\n","model.compile(optimizer=\"adam\",\n","              loss = custom_hamming_loss,\n","              metrics =metrics_array,\n","              experimental_run_tf_function=False)\n","print(model.summary())\n","from keras.callbacks import Callback, EarlyStopping\n","checkpoint_path = \"./model_checkpoint\"\n","callbacks = [\n","    ModelCheckpoint(checkpoint_path, monitor='val_loss',verbose=1)\n","]\n","# Fit the model\n","STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n","STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n","STEP_SIZE_TEST=test_generator.n//test_generator.batch_size\n"," \t\n","# load a saved model\n","from keras.models import load_model\n","try:\n","    saved_model = load_model('./model_checkpoint',compile=False,\n","                            custom_objects={'f1_m':f1_m,'precision_m':precision_m,'recall_m':recall_m})\n","except:\n","    print(\"no saved model found\")\n","# Save the weights using the `checkpoint_path` format\n","model.save_weights(checkpoint_path.format(epoch=0))\n","\n","history=model.fit(generator_wrapper(train_generator),\n","                    steps_per_epoch=STEP_SIZE_TRAIN,\n","                    validation_data=generator_wrapper(valid_generator),\n","                    validation_steps=STEP_SIZE_VALID,\n","                    callbacks = callbacks,\n","                    epochs=5\n","                    \n",")\n","\n","```\n"]},{"cell_type":"markdown","metadata":{"id":"uYo2u8tCluuO"},"source":["# Get some visualizaiton"]},{"cell_type":"code","metadata":{"id":"wxE2oQuyD4mB"},"source":["from keras import models\n","import matplotlib.image as mpimg\n","import numpy as np\n","from keras.preprocessing import image\n","import imageio as im\n","layer_outputs = [layer.output for layer in model.layers[1:]] \n","# Extracts the outputs of the layers\n","activation_model = models.Model(inputs=model.input, outputs=layer_outputs) \n","# Creates a model that will return these outputs, given the model input\n","img_path = 'VisualDataset/1341_11.png'\n","img = image.load_img(img_path, target_size=(100, 100))\n","img_tensor = image.img_to_array(img)\n","img_tensor = np.expand_dims(img_tensor, axis=0)\n","activations = activation_model.predict(img_tensor)\n","plt.imshow(img)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZlETN7-XEWlO"},"source":["layer_names = []\n","for layer in model.layers[:17]:\n","    layer_names.append(layer.name) # Names of the layers, so you can have them as part of your plot\n","images_per_row=32\n","for layer_name, layer_activation in zip(layer_names, activations):\n","    n_features = layer_activation.shape[-1]\n","    size = layer_activation.shape[1] #The feature map has shape (1, size, size, n_features).\n","    n_cols = n_features // images_per_row # Tiles the activation channels in this matrix\n","    display_grid = np.zeros((size*n_cols, size*images_per_row))\n","    for col in range(n_cols): # Tiles each filter into a big horizontal grid\n","        \n","        for row in range(images_per_row):\n","            \n","            channel_image = layer_activation[0,:, :,col * images_per_row + row]\n","            channel_image -= channel_image.mean() # Post-processes the feature to make it visually palatable\n","            channel_image /= channel_image.std()\n","            channel_image *= 64\n","            channel_image += 128\n","            channel_image = np.clip(channel_image, 0, 255).astype('uint8')\n","            display_grid[col * size : (col + 1) * size, # Displays the grid\n","                         row * size : (row + 1) * size] = channel_image\n","            scale = 1. / size\n","    plt.figure(figsize=(scale * display_grid.shape[1],\n","                                scale * display_grid.shape[0]))\n","    plt.title(layer_name)\n","    plt.grid(False)\n","    plt.imshow(display_grid, aspect='auto', cmap='viridis')    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5vFcLvG8iyZE"},"source":["import matplotlib.pyplot as plt\n","plt.clf()\n","fig = go.Figure()\n","for i in range(num_classes):\n","    fig.add_trace(go.Scatter(\n","                        y=history.history['loss'],\n","                        name='Train'))\n","    fig.add_trace(go.Scatter(\n","                        y=history.history['val_loss'],\n","                        name='Valid'))\n","    fig.update_layout(height=500, \n","                      width=700,\n","                      title='val_loss for race feature',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='val_loss')\n","    fig.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R8MmMgzxSP95"},"source":["\n","import matplotlib.pyplot as plt\n","plt.clf()\n","fig = go.Figure()\n","for i in range(num_classes):\n","    fig.add_trace(go.Scatter(\n","                        y=history.history['accuracy'],\n","                        name='Train'))\n","    fig.add_trace(go.Scatter(\n","                        y=history.history['accuracy'],\n","                        name='Valid'))\n","    fig.update_layout(height=500, \n","                      width=700,\n","                      title='Accuracy for race feature',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='Accuracy')\n","    fig.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6AkwrHfel6aJ"},"source":["#Predict Results"]},{"cell_type":"code","metadata":{"id":"XSR5rny2Gpef"},"source":["\n","test_generator=test_datagen.flow_from_dataframe(\n","    dataframe=df[2415:2416],\n","    directory=\"VisualDataset\",\n","    x_col=\"ID_Frame\",\n","    color_mode=\"rgb\",\n","    batch_size=1,\n","    seed=42,\n","    shuffle=False,\n","    class_mode=None,\n","    target_size=(100,100))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b4W3qP4gNDUq"},"source":["STEP_SIZE_TEST=test_generator.n//test_generator.batch_size\n","test_generator.reset()\n","pred=model.predict(test_generator,\n","    steps=STEP_SIZE_TEST,\n","    verbose=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3aZNfH2qEv7p"},"source":["print(pred)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"x2z_-3m3tNLC"},"source":["pred_bool = (pred >0.3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N2KVeIaTRn73"},"source":["predictions = pred_bool.astype(int)\n","\n","#columns should be the same order of y_col\n","results=pd.DataFrame(predictions, columns=main_genre)\n","results[\"Filenames\"]=test_generator.filenames\n","ordered_cols=[\"Filenames\"]+main_genre\n","results=results[ordered_cols]#To get the same column order\n","results.to_csv(\"results.csv\",index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0qdXDGGuuEMg"},"source":["print(predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uSpKUHIauhjg"},"source":["predictions=[]\n","for row in pred_bool:\n","    l=[]\n","    for index,cls in enumerate(row):\n","        if cls:\n","            l.append(main_genre[index])\n","    predictions.append(\",\".join(l))\n","print(predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"56zydaU1mHjd"},"source":["#Compare results\n"]},{"cell_type":"code","metadata":{"id":"U36P9f70Ooc3"},"source":["def load_name(csv_path,id):\n","    df= pd.read_csv(csv_path)\n","    ids = df['movieId']\n","    return (df.loc[ids == id])['title'].values.tolist()\n","def load_label(csv_path,id):\n","    df= pd.read_csv(csv_path)\n","    ids = df['ID_Frame']\n","    genres_str = (df.loc[ids == id])['Genres'].values.tolist()\n","    if genres_str:\n","        genres = genres_str[0].split('|')\n","        return genres\n","    else:\n","        return []"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2biIKjaGFAAp"},"source":["print(pred)\n","true_labels = []\n","for i,j in enumerate(test_generator.filenames):\n","    true_labels.append(load_label(\"trial.csv\",j))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FAmf-C6CSPGA"},"source":["filenames=test_generator.filenames\n","results=pd.DataFrame({\"Filename\":filenames,\n","                      \"Predictions\":predictions,\n","                      \"TrueLabels\":true_labels})\n","results.to_csv(\"results.csv\",index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fc3i4GM-STSu"},"source":["from sklearn.metrics import confusion_matrix\n","print(confusion_matrix(y_true, y_pred.transpose()))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"p1kKokzumCT-"},"source":["# Very old version for model outputs."]},{"cell_type":"code","metadata":{"id":"co4BdMK4WzlS"},"source":["#for i in range(num_classes):\n","    #binary_output = Dense(1, activation='sigmoid', name=main_genre[i])(x)\n","    #output1.append(binary_output)\n","#categorical_output = Dense(num_classes, activation='softmax', name='category_output')(x)\n","#output.append(categorical_output)\n","\n","#metrics_array['category_output'] =\"categorical_crossentropy\"\n","#loss_array['category_output'] = \"categorical_crossentropy\"\n","\n","    #binary_output = Dense(1, activation='sigmoid', name=main_genre[i])(x)\n","    #output.append(binary_output)\n","    #binary_output = Dense(1, activation='softmax', name=main_genre[i])(x)\n","    #output.append(binary_output)\n","    #metrics_array[main_genre[i]] = f1_m\n","    #loss.append(tf.keras.losses.CategoricalCrossentropy(\n","    #from_logits=False, label_smoothing=0, reduction=tf.keras.losses.Reduction.SUM,\n","    #name='categorical_crossentropy'))\n","    \n","    #metrics_array[main_genre[i]] =  tf.keras.metrics.AUC(\n","    #num_thresholds=200,\n","    #curve=\"ROC\",\n","    #summation_method=\"interpolation\",\n","    #name=None,\n","    #dtype=None,\n","    #thresholds=None,\n","    #multi_label=True,\n","    #label_weights=None)\n","\n","    #loss_array[main_genre[i]] = custom_hamming_loss\n","#metrics_array['categorical_output'] = 'sparse_categorical_accuracy'\n","\n","#metrics_array['categorical_output'] = 'sparse_categorical_crossentropy'\n","#loss_array['custom_hamming_loss'] = custom_hamming_loss\n","#metrics_roc=  tf.keras.metrics.AUC(\n","#    num_thresholds=200,\n","#    curve=\"ROC\",\n","#    summation_method=\"interpolation\",\n","#    name=None,\n","#    dtype=None,\n","#    thresholds=None,\n","#    multi_label=True,\n","#    label_weights=None)"],"execution_count":null,"outputs":[]}]}