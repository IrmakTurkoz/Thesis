{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"FFT RNN_MultiClassMultiOutput","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMP/d7g0S63NO3huTCR2UMS"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZqHOqqVgJwu6","executionInfo":{"status":"ok","timestamp":1618140774053,"user_tz":-180,"elapsed":861,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"47414638-cadb-4ae7-9024-7b5afb8cfed6"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","!ls /content/gdrive"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","MyDrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VZrXvU8t8eyj","executionInfo":{"status":"ok","timestamp":1618140774401,"user_tz":-180,"elapsed":616,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"32d73941-5093-480e-aaf4-80c2d7812f8f"},"source":["%cd /content/gdrive/My\\ Drive/Thesis/MovieLens20M"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/gdrive/My Drive/Thesis/MovieLens20M\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uBdx1u3W9CBq","executionInfo":{"status":"ok","timestamp":1618140781019,"user_tz":-180,"elapsed":6372,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"95fa7e4f-f990-445f-f76e-9fb72e1d0d86"},"source":["pip install git+https://github.com/keras-team/keras-tuner.git@1.0.2rc0#egg=keras-tuner-1.0.2rc0"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting keras-tuner-1.0.2rc0\n","  Cloning https://github.com/keras-team/keras-tuner.git (to revision 1.0.2rc0) to /tmp/pip-install-fivvg343/keras-tuner-1.0.2rc0\n","  Running command git clone -q https://github.com/keras-team/keras-tuner.git /tmp/pip-install-fivvg343/keras-tuner-1.0.2rc0\n","  Running command git checkout -q 5d16a5a9cd883fe6366d523a5e59b72cfefb7f77\n","  WARNING: Generating metadata for package keras-tuner-1.0.2rc0 produced metadata for project name keras-tuner. Fix your #egg=keras-tuner-1.0.2rc0 fragments.\n","Requirement already satisfied (use --upgrade to upgrade): keras-tuner from git+https://github.com/keras-team/keras-tuner.git@1.0.2rc0#egg=keras-tuner-1.0.2rc0 in /usr/local/lib/python3.7/dist-packages\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (20.9)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.16.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.19.5)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.8.9)\n","Requirement already satisfied: terminaltables in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (3.1.0)\n","Requirement already satisfied: colorama in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.4.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (4.41.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (2.23.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.4.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.22.2.post1)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->keras-tuner) (2.4.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2020.12.5)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (3.0.4)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->keras-tuner) (1.0.1)\n","Building wheels for collected packages: keras-tuner, keras-tuner\n","  Building wheel for keras-tuner (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-tuner: filename=keras_tuner-1.0.2rc0-cp37-none-any.whl size=89059 sha256=2183998100e0332fae53446ec7ef0aeb4eb3ba1558d84bec0934037d949a558a\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-_zjkvjnd/wheels/ab/97/20/917008aafbd47b823fb0bc43989739b1195c682036641a49d7\n","  Building wheel for keras-tuner (setup.py) ... \u001b[?25lerror\n","  ERROR: Failed building wheel for keras-tuner\n","\u001b[?25h  Running setup.py clean for keras-tuner\n","  ERROR: Failed cleaning build dir for keras-tuner\n","Successfully built keras-tuner\n","Failed to build keras-tuner\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fCxTFJWUZVpv","executionInfo":{"status":"ok","timestamp":1618140781532,"user_tz":-180,"elapsed":5221,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"7d19f1fb-b2d4-45d3-cdb3-06f321d141a6"},"source":["pip install git+https://github.com/keras-team/keras/data_utils.py"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting git+https://github.com/keras-team/keras/data_utils.py\n","  Cloning https://github.com/keras-team/keras/data_utils.py to /tmp/pip-req-build-wj70s48z\n","  Running command git clone -q https://github.com/keras-team/keras/data_utils.py /tmp/pip-req-build-wj70s48z\n","  remote: Not Found\n","  fatal: repository 'https://github.com/keras-team/keras/data_utils.py/' not found\n","ERROR: Command errored out with exit status 128: git clone -q https://github.com/keras-team/keras/data_utils.py /tmp/pip-req-build-wj70s48z Check the logs for full command output.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SZ_wT5rp27J2"},"source":["import os\n","import shutil\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from tensorflow import keras\n","from pathlib import Path\n","from IPython.display import display, Audio\n","import keras\n","from keras.callbacks import ModelCheckpoint\n","import sklearn\n","import matplotlib.pyplot as plt\n","import kerastuner as kt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ID9i-g0hjWcM","executionInfo":{"status":"ok","timestamp":1618140782492,"user_tz":-180,"elapsed":1231,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"8fd28623-22c8-4814-a529-de9795431064"},"source":["from collections import Counter\n","\n","def get_equal_subsets(genres,df_name,y_label,y_subset_label,output_csv,save=True,eliminate_multilabels=True):\n","    df = pd.read_csv(df_name)\n","    #Drop unnamed ranges.\n","    df.drop(df.columns[df.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)\n","    #Save back to statistics\n","    df.to_csv(df_name)\n","    df[y_label]=df[y_label].apply(lambda x:x.strip('][').replace('\\'','').replace(' ','').split(\",\"))\n","    #Only work with these genres for now.\n","    main_genre = genres\n","    main_set = set(main_genre)\n","    df[y_subset_label] = df[y_label].apply(lambda x: list(set(x).intersection(main_set))  )\n","    #If labels are empty remove from dataset.\n","    df = df[df[y_subset_label].map(lambda d: len(d)) > 0]\n","   \n","    #find which has lowest sample.\n","    counter = Counter([x for genres in df[y_subset_label] for x in genres])   \n","    bottle_neck= min(counter, key=counter.get)\n","    df[y_subset_label] = df[y_subset_label].map(lambda d: [bottle_neck] if any([e == bottle_neck for e in d]) else d )\n","    df_d = df[df[y_subset_label].map(lambda d:  d[0] is bottle_neck)   ]\n","    counter = Counter([x for genres in df[y_subset_label] for x in genres]) \n","    \n","    #eliminate multilabels\n","    if eliminate_multilabels:\n","        df = df[df[y_subset_label].map(lambda d: len(d)) <2 ]\n","    counter = Counter([x for genres in df[y_subset_label] for x in genres]) \n","    min_val = counter[bottle_neck]\n","\n","    other_genres = [g for g in genres if g is not bottle_neck]\n","    #randomly get a part of the other genres\n","    \n","    for gen in other_genres:\n","\n","        df_g = df[df[y_subset_label].map(lambda d:  d[0] is gen)   ]\n","        df_g = df_g.sample(frac=1).reset_index(drop=True)\n","        df_d=df_d.append(df_g[:min_val])\n","    df_d = df_d.sample(frac=1).reset_index(drop=True)\n","    if save:\n","        df_d.to_csv(output_csv)\n","        \n","    print(df_d)\n","    \n","    counter = Counter([x for genres in df_d[y_subset_label] for x in genres]) \n","    return df_d\n","\n","main_genre = ['Horror', 'Romance']\n","df_name = \"videos_dataset2.csv\"\n","df = get_equal_subsets(main_genre,df_name,\"Genres\",\"Genres_Subset\",\"RNNAudio/videos_dataset2_subset.csv\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["     ID_Frame                      Genres  ... Number_Frames  Genres_Subset\n","0         207            [Drama, Romance]  ...          30.0      [Romance]\n","1        2003            [Comedy, Horror]  ...          28.0       [Horror]\n","2         179            [Drama, Romance]  ...          10.0      [Romance]\n","3        3847                    [Horror]  ...          37.0       [Horror]\n","4         488            [Drama, Romance]  ...           5.0      [Romance]\n","..        ...                         ...  ...           ...            ...\n","545      3155            [Drama, Romance]  ...          35.0      [Romance]\n","546       804           [Comedy, Romance]  ...          10.0      [Romance]\n","547      1463           [Comedy, Romance]  ...          38.0      [Romance]\n","548       764            [Drama, Romance]  ...          14.0      [Romance]\n","549      3660  [Horror, Sci-Fi, Thriller]  ...          39.0       [Horror]\n","\n","[550 rows x 5 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eWgsEYsk1hT4","executionInfo":{"status":"ok","timestamp":1618140799983,"user_tz":-180,"elapsed":866,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"f933dbb4-214b-4c84-abf5-26ce00c10117"},"source":["num_classes = len(main_genre)\n","train_files = df[:800]\n","train_files.to_csv(\"audio_visualized_statistics.csv\")\n","val_files = df[800:1000 ]\n","val_files.to_csv(\"audio_visualized_statistics.csv\")\n","test_files = df[1000 :]\n","test_files.to_csv(\"audio_statistics_test.csv\")\n","print('Training set size', len(train_files))\n","print('Validation set size', len(val_files))\n","print('Test set size', len(test_files))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Training set size 550\n","Validation set size 0\n","Test set size 0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iQhHSHgiCT8C"},"source":["#Extract audio as fourier transform\n","\n"]},{"cell_type":"code","metadata":{"id":"vGKXv9_d-aCm"},"source":["SAMPLING_RATE = 16000\n","BATCH_SIZE = 64\n","import sys\n","def path_to_audio(path):\n","    \"\"\"Reads and decodes an audio file.\"\"\"\n","    audio = tf.io.read_file(path)\n","    audio, _ = tf.audio.decode_wav(audio, 1, SAMPLING_RATE)\n","    return audio\n","def audio_to_fft(audio):\n","    # Since tf.signal.fft applies FFT on the innermost dimension,\n","    # we need to squeeze the dimensions and then expand them again\n","    # after FFT\n","    audio = tf.squeeze(audio, axis=-1)\n","    fft = tf.signal.fft(\n","        tf.cast(tf.complex(real=audio, imag=tf.zeros_like(audio)), tf.complex64)\n","    )\n","    fft = tf.expand_dims(fft, axis=-1)\n","\n","    # Return the absolute value of the first half of the FFT\n","    # which represents the positive frequencies\n","    return tf.math.abs(fft[:, : (SAMPLING_RATE // 2)])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"faIrlaMcuT05","executionInfo":{"status":"ok","timestamp":1618141151623,"user_tz":-180,"elapsed":3569,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"0c3c2c35-1862-474c-c170-56d2cf67f31c"},"source":["print(audio_to_fft(path_to_audio(\"AudioDataset/9013.wav\")))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tf.Tensor(\n","[[0.40371704]\n"," [0.32748118]\n"," [0.24726346]\n"," ...\n"," [0.15637647]\n"," [0.24726328]\n"," [0.3274811 ]], shape=(16000, 1), dtype=float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hFolZyUU-vrt"},"source":["#Data generator"]},{"cell_type":"code","metadata":{"id":"qWxs669T-8lI"},"source":["from tensorflow.python.keras.utils import data_utils\n","import keras\n","class DataGenerator(data_utils.Sequence):\n","    def __init__(self,batch_size,folder,n_classes,shuffle,csv_file,x_label,y_label,main_genre):#Initializing the values\n","        self.main_genre = main_genre\n","        self.folder = folder\n","                \n","        self.x_label = x_label\n","        self.y_label = y_label\n","        \n","        self.stats = pd.read_csv(csv_file)\n","\n","        self.stats[self.y_label]=self.stats[self.y_label].apply(lambda x:x.strip('][').replace(' ','').replace('\\'','').split(\",\"))\n","        self.classes = self.stats[self.y_label]\n","        self.batch_size = batch_size\n","        self.list_IDs = np.arange(len(self.stats.index))\n","        self.n_classes = n_classes\n","        self.shuffle = shuffle \n","\n","        self.max = self.__len__()\n","        self.n = 0\n","        # this integer encoding is purely based on position, you can do this in other ways\n","        print(\"Found data size: \",len(self.list_IDs))\n","        self.dic = {x: i for i,x in enumerate(self.main_genre)}\n","        self.on_epoch_end()\n","    def on_epoch_end(self):\n","        self.indexes = self.list_IDs\n","        if self.shuffle == True:\n","            np.random.shuffle(self.indexes)\n","        \n","    def __len__(self):\n","        l = int(len(self.list_IDs) / self.batch_size)\n","        if l*self.batch_size < len(self.list_IDs):\n","            l += 1\n","        return l\n","    def __getitem__(self, index):\n","      'Generate one batch of data'\n","\n","      indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n","      # Find list of IDs\n","      list_IDs_temp = [self.list_IDs[k] for k in indexes]\n","      \n","      # Generate data\n","      X, y = self.__data_generation(list_IDs_temp)\n","\n","      return X, y\n","\n","\n","\n","    def __data_generation(self,list_IDs_temp): \n","        X_data = []\n","        y_data = []\n","\n","        #Iterating through each#sequence of frames\n","        for i,_ in enumerate(list_IDs_temp): #for i in tqdm(range(stats.shape[0])\n","\n","            my_id = self.stats[self.x_label].iloc[i]\n","           \n","            labels = self.stats[self.y_label].iloc[i]\n","            \n","            y = [int(k in labels) for k,v in self.dic.items()]\n","            temp_data_list = []\n","            #print(self.folder+'/'+my_id.astype(str)+\".wav\")\n","            audio = path_to_audio(self.folder+'/'+my_id.astype(str)+\".wav\")\n","            fft = audio_to_fft(audio)\n","            #print(fft.shape)         \n","                    \n","                \n","            X_data.append(fft)\n","            y_data.append(y)\n","        X = np.array(X_data)\n","        y = np.array(y_data)\n","        #print(\"X.shape\",X.shape)\n","        #print(\"y.shape\",y.shape)\n","        \n","        return X,y\n","\n","    def __next__(self):\n","        if self.n >= self.max:\n","           self.n = 0\n","        result = self.__getitem__(self.n)\n","        self.n += 1\n","        return result"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UhcMrx2GADgl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616853854030,"user_tz":-180,"elapsed":534,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"121c7312-6e7a-403f-bca5-b6e670722eaf"},"source":["\n","num_classes = len(main_genre)\n","params = {\n","    'folder' : \"AudioDataset\",\n","    'batch_size':BATCH_SIZE,\n","    'n_classes':num_classes,\n","    'shuffle':True,\n","    'csv_file':'audio_statistics_train.csv',\n","    'main_genre':main_genre ,\n","    'x_label' : 'ID_Frame',\n","    'y_label': 'Genres_subset'}\n","train_generator = DataGenerator(**params)\n","params2 = {\n","    'folder' : \"AudioDataset\",\n","    'batch_size':BATCH_SIZE,\n","    'n_classes':num_classes,\n","    'shuffle':True,\n","    'csv_file':'audio_statistics_val.csv',\n","    'main_genre':main_genre ,\n","    'x_label' : 'ID_Frame',\n","    'y_label': 'Genres_subset'}\n","valid_generator = DataGenerator(**params2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found data size:  800\n","Found data size:  200\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wqb10PPKClPO","executionInfo":{"status":"ok","timestamp":1616853914105,"user_tz":-180,"elapsed":58665,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"1f14d09c-93fd-4988-a805-b8ab94cf58d6"},"source":["imgs, labels = next(train_generator)\n","print(\"labels.shape\",labels.shape)\n","print(len(imgs))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["labels.shape (64, 2)\n","64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ACvdR4p4pTxh","executionInfo":{"status":"ok","timestamp":1616853914107,"user_tz":-180,"elapsed":41549,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"b34dae73-e2e7-4359-fff0-1f648aece691"},"source":["print(imgs[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.]\n"," [0.]\n"," [0.]\n"," ...\n"," [0.]\n"," [0.]\n"," [0.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"TRBxwNO_pgiD","executionInfo":{"status":"ok","timestamp":1616853914108,"user_tz":-180,"elapsed":39760,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"82a97baf-0185-44bc-f068-45079b64698e"},"source":["import matplotlib.pyplot as plt\n","N = 16000\n","t = np.arange(N)\n","m = 4\n","nu = float(m)/N\n","f = np.sin(2*np.pi*nu*t)\n","\n","plt.plot(imgs[0], imgs[0].real**2 + imgs[0].imag**2)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4n_AsFc6vXrT","executionInfo":{"status":"ok","timestamp":1616853914109,"user_tz":-180,"elapsed":38132,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"291a0629-1927-40bf-f865-b378496eb5d5"},"source":["from collections import Counter\n","\n","counter = Counter([x for main_genre in train_generator.classes for x in main_genre])                          \n","max_val = float(max(counter.values())) \n","\n","num_data = 1600\n","class_weights = {class_id : max_val/num_images for class_id, num_images in counter.items()}     \n","print(\"Class weights are:\" ,class_weights)\n","\n","class_weights = {np.int(train_generator.dic[class_id]) : np.float32(max_val/num_images) for class_id, num_images in counter.items()} \n","print(\"Class weights are:\" ,class_weights)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Class weights are: {'Drama': 1.0618556701030928, 'Comedy': 1.0}\n","Class weights are: {1: 1.0618557, 0: 1.0}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hz2FHQ_o-yzI"},"source":["#Custom loss & metrics"]},{"cell_type":"code","metadata":{"id":"OtPqB8mzZTA5"},"source":["def recall_m(y_true, y_pred):\n","    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","    recall = true_positives / (possible_positives + K.epsilon())\n","    return recall\n","\n","def precision_m(y_true, y_pred):\n","    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n","    precision = true_positives / (predicted_positives + K.epsilon())\n","    return precision\n","\n","def f1_m(y_true, y_pred):\n","    precision = precision_m(y_true, y_pred)\n","    recall = recall_m(y_true, y_pred)\n","    return 2*((precision*recall)/(precision+recall+K.epsilon()))\n","import keras.backend as K\n","def custom_hamming_loss(y_true, y_pred):\n","    # Avoid divide by 0\n","    y_true = tf.cast(y_true, tf.float32)\n","    y_pred = K.clip(y_pred, K.epsilon(), 1 - K.epsilon())\n","    # Multi-task loss\n","    return K.mean(K.sum(- y_true * K.log(y_pred) - (1 - y_true) * K.log(1 - y_pred), axis=1))\n","\n","\n","def f1_loss(y_true, y_pred):\n","    \n","    tp = K.sum(K.cast(y_true*y_pred, 'float'), axis=0)\n","    tn = K.sum(K.cast((1-y_true)*(1-y_pred), 'float'), axis=0)\n","    fp = K.sum(K.cast((1-y_true)*y_pred, 'float'), axis=0)\n","    fn = K.sum(K.cast(y_true*(1-y_pred), 'float'), axis=0)\n","\n","    p = tp / (tp + fp + K.epsilon())\n","    r = tp / (tp + fn + K.epsilon())\n","\n","    f1 = 2*p*r / (p+r+K.epsilon())\n","    f1 = tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)\n","    return 1 - K.mean(f1)\n","    \n","def generator_wrapper(generator):\n","    for batch_x,batch_y in generator:\n","        yield (batch_x,np.array([batch_y[:,i] for i in range(num_classes)]).transpose())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2p5t82pXHMp6"},"source":["#Not Using keras tuner"]},{"cell_type":"code","metadata":{"id":"Wi35BwIIn9sX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616853915332,"user_tz":-180,"elapsed":36383,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"608c42aa-e4e9-47e2-fe35-b7c9c9f5743c"},"source":["def residual_block(x, filters, conv_num=3, activation=\"relu\"):\n","    # Shortcut\n","    s = keras.layers.Conv1D(filters, 1, padding=\"same\")(x)\n","    for i in range(conv_num - 1):\n","        x = keras.layers.Conv1D(filters, 3, padding=\"same\")(x)\n","        x = keras.layers.Activation(activation)(x)\n","    x = keras.layers.Conv1D(filters, 3, padding=\"same\")(x)\n","    x = keras.layers.Add()([x, s])\n","    x = keras.layers.Activation(activation)(x)\n","    return keras.layers.MaxPool1D(pool_size=2, strides=2)(x)\n","\n","\n","def build_model(input_shape, num_classes):\n","    inputs = keras.layers.Input(shape=input_shape, name=\"input\")\n","\n","    x = residual_block(inputs, 16, 2)\n","    x = residual_block(x, 32, 2)\n","    x = residual_block(x, 64, 3)\n","    x = residual_block(x, 128, 3)\n","    x = residual_block(x, 128, 3)\n","\n","    x = keras.layers.AveragePooling1D(pool_size=3, strides=3)(x)\n","    x = keras.layers.Flatten()(x)\n","    x = keras.layers.Dense(256, activation=\"relu\")(x)\n","    x = keras.layers.Dense(128, activation=\"relu\")(x)\n","\n","    outputs = keras.layers.Dense(num_classes, activation=\"sigmoid\",name=\"categorical_output\")(x)\n","    return keras.models.Model(inputs=inputs, outputs=outputs)\n","\n","model = build_model((SAMPLING_RATE, 1), num_classes)\n","\n","model.summary()\n","loss_array = [custom_hamming_loss,f1_loss]\n","metrics_array = ['accuracy',f1_m,precision_m,recall_m]\n","loss_weights = [0.6, 0.4]\n","\n","# Compile the model using Adam's default learning rate\n","model.compile(\n","    optimizer=keras.optimizers.Adam(learning_rate=0.01)\n","    , loss=loss_array,loss_weights=loss_weights, metrics=metrics_array)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input (InputLayer)              [(None, 16000, 1)]   0                                            \n","__________________________________________________________________________________________________\n","conv1d_1 (Conv1D)               (None, 16000, 16)    64          input[0][0]                      \n","__________________________________________________________________________________________________\n","activation (Activation)         (None, 16000, 16)    0           conv1d_1[0][0]                   \n","__________________________________________________________________________________________________\n","conv1d_2 (Conv1D)               (None, 16000, 16)    784         activation[0][0]                 \n","__________________________________________________________________________________________________\n","conv1d (Conv1D)                 (None, 16000, 16)    32          input[0][0]                      \n","__________________________________________________________________________________________________\n","add (Add)                       (None, 16000, 16)    0           conv1d_2[0][0]                   \n","                                                                 conv1d[0][0]                     \n","__________________________________________________________________________________________________\n","activation_1 (Activation)       (None, 16000, 16)    0           add[0][0]                        \n","__________________________________________________________________________________________________\n","max_pooling1d (MaxPooling1D)    (None, 8000, 16)     0           activation_1[0][0]               \n","__________________________________________________________________________________________________\n","conv1d_4 (Conv1D)               (None, 8000, 32)     1568        max_pooling1d[0][0]              \n","__________________________________________________________________________________________________\n","activation_2 (Activation)       (None, 8000, 32)     0           conv1d_4[0][0]                   \n","__________________________________________________________________________________________________\n","conv1d_5 (Conv1D)               (None, 8000, 32)     3104        activation_2[0][0]               \n","__________________________________________________________________________________________________\n","conv1d_3 (Conv1D)               (None, 8000, 32)     544         max_pooling1d[0][0]              \n","__________________________________________________________________________________________________\n","add_1 (Add)                     (None, 8000, 32)     0           conv1d_5[0][0]                   \n","                                                                 conv1d_3[0][0]                   \n","__________________________________________________________________________________________________\n","activation_3 (Activation)       (None, 8000, 32)     0           add_1[0][0]                      \n","__________________________________________________________________________________________________\n","max_pooling1d_1 (MaxPooling1D)  (None, 4000, 32)     0           activation_3[0][0]               \n","__________________________________________________________________________________________________\n","conv1d_7 (Conv1D)               (None, 4000, 64)     6208        max_pooling1d_1[0][0]            \n","__________________________________________________________________________________________________\n","activation_4 (Activation)       (None, 4000, 64)     0           conv1d_7[0][0]                   \n","__________________________________________________________________________________________________\n","conv1d_8 (Conv1D)               (None, 4000, 64)     12352       activation_4[0][0]               \n","__________________________________________________________________________________________________\n","activation_5 (Activation)       (None, 4000, 64)     0           conv1d_8[0][0]                   \n","__________________________________________________________________________________________________\n","conv1d_9 (Conv1D)               (None, 4000, 64)     12352       activation_5[0][0]               \n","__________________________________________________________________________________________________\n","conv1d_6 (Conv1D)               (None, 4000, 64)     2112        max_pooling1d_1[0][0]            \n","__________________________________________________________________________________________________\n","add_2 (Add)                     (None, 4000, 64)     0           conv1d_9[0][0]                   \n","                                                                 conv1d_6[0][0]                   \n","__________________________________________________________________________________________________\n","activation_6 (Activation)       (None, 4000, 64)     0           add_2[0][0]                      \n","__________________________________________________________________________________________________\n","max_pooling1d_2 (MaxPooling1D)  (None, 2000, 64)     0           activation_6[0][0]               \n","__________________________________________________________________________________________________\n","conv1d_11 (Conv1D)              (None, 2000, 128)    24704       max_pooling1d_2[0][0]            \n","__________________________________________________________________________________________________\n","activation_7 (Activation)       (None, 2000, 128)    0           conv1d_11[0][0]                  \n","__________________________________________________________________________________________________\n","conv1d_12 (Conv1D)              (None, 2000, 128)    49280       activation_7[0][0]               \n","__________________________________________________________________________________________________\n","activation_8 (Activation)       (None, 2000, 128)    0           conv1d_12[0][0]                  \n","__________________________________________________________________________________________________\n","conv1d_13 (Conv1D)              (None, 2000, 128)    49280       activation_8[0][0]               \n","__________________________________________________________________________________________________\n","conv1d_10 (Conv1D)              (None, 2000, 128)    8320        max_pooling1d_2[0][0]            \n","__________________________________________________________________________________________________\n","add_3 (Add)                     (None, 2000, 128)    0           conv1d_13[0][0]                  \n","                                                                 conv1d_10[0][0]                  \n","__________________________________________________________________________________________________\n","activation_9 (Activation)       (None, 2000, 128)    0           add_3[0][0]                      \n","__________________________________________________________________________________________________\n","max_pooling1d_3 (MaxPooling1D)  (None, 1000, 128)    0           activation_9[0][0]               \n","__________________________________________________________________________________________________\n","conv1d_15 (Conv1D)              (None, 1000, 128)    49280       max_pooling1d_3[0][0]            \n","__________________________________________________________________________________________________\n","activation_10 (Activation)      (None, 1000, 128)    0           conv1d_15[0][0]                  \n","__________________________________________________________________________________________________\n","conv1d_16 (Conv1D)              (None, 1000, 128)    49280       activation_10[0][0]              \n","__________________________________________________________________________________________________\n","activation_11 (Activation)      (None, 1000, 128)    0           conv1d_16[0][0]                  \n","__________________________________________________________________________________________________\n","conv1d_17 (Conv1D)              (None, 1000, 128)    49280       activation_11[0][0]              \n","__________________________________________________________________________________________________\n","conv1d_14 (Conv1D)              (None, 1000, 128)    16512       max_pooling1d_3[0][0]            \n","__________________________________________________________________________________________________\n","add_4 (Add)                     (None, 1000, 128)    0           conv1d_17[0][0]                  \n","                                                                 conv1d_14[0][0]                  \n","__________________________________________________________________________________________________\n","activation_12 (Activation)      (None, 1000, 128)    0           add_4[0][0]                      \n","__________________________________________________________________________________________________\n","max_pooling1d_4 (MaxPooling1D)  (None, 500, 128)     0           activation_12[0][0]              \n","__________________________________________________________________________________________________\n","average_pooling1d (AveragePooli (None, 166, 128)     0           max_pooling1d_4[0][0]            \n","__________________________________________________________________________________________________\n","flatten (Flatten)               (None, 21248)        0           average_pooling1d[0][0]          \n","__________________________________________________________________________________________________\n","dense (Dense)                   (None, 256)          5439744     flatten[0][0]                    \n","__________________________________________________________________________________________________\n","dense_1 (Dense)                 (None, 128)          32896       dense[0][0]                      \n","__________________________________________________________________________________________________\n","categorical_output (Dense)      (None, 2)            258         dense_1[0][0]                    \n","==================================================================================================\n","Total params: 5,807,954\n","Trainable params: 5,807,954\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eJyV4ZCCcyU8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616856469099,"user_tz":-180,"elapsed":2354114,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"7b9e815b-0b54-493c-f817-7f63e60e1aaa"},"source":["filepath = 'saved_weights_audio_RNN/'\n","checkpoint = ModelCheckpoint(\n","    filepath, monitor='loss', \n","    verbose=0,        \n","    save_best_only=True,        \n","    mode='min'\n",")    \n","callbacks_list = [checkpoint]     \n","\n","history = model.fit(train_generator,validation_data=valid_generator, epochs=20, batch_size=BATCH_SIZE, class_weight=class_weights,\n","                    callbacks=callbacks_list)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","13/13 [==============================] - 199s 13s/step - loss: 2.8199 - accuracy: 0.4977 - f1_m: 0.4543 - precision_m: 0.4650 - recall_m: 0.5291 - val_loss: 0.8467 - val_accuracy: 0.5950 - val_f1_m: 0.5967 - val_precision_m: 0.6038 - val_recall_m: 0.5898\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 2/20\n","13/13 [==============================] - 107s 8s/step - loss: 0.8091 - accuracy: 0.5627 - f1_m: 0.5563 - precision_m: 0.5769 - recall_m: 0.5658 - val_loss: 0.8338 - val_accuracy: 0.5800 - val_f1_m: 0.6612 - val_precision_m: 0.5064 - val_recall_m: 0.9531\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 3/20\n","13/13 [==============================] - 112s 9s/step - loss: 0.8156 - accuracy: 0.5419 - f1_m: 0.5950 - precision_m: 0.5345 - recall_m: 0.7165 - val_loss: 1.1064 - val_accuracy: 0.5950 - val_f1_m: 0.5933 - val_precision_m: 0.5967 - val_recall_m: 0.5898\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 4/20\n","13/13 [==============================] - 112s 9s/step - loss: 0.8222 - accuracy: 0.5591 - f1_m: 0.5597 - precision_m: 0.5585 - recall_m: 0.5610 - val_loss: 1.1564 - val_accuracy: 0.6100 - val_f1_m: 0.6133 - val_precision_m: 0.6133 - val_recall_m: 0.6133\n","Epoch 5/20\n","13/13 [==============================] - 112s 9s/step - loss: 0.9367 - accuracy: 0.5504 - f1_m: 0.5505 - precision_m: 0.5511 - recall_m: 0.5500 - val_loss: 0.8380 - val_accuracy: 0.6100 - val_f1_m: 0.6133 - val_precision_m: 0.6133 - val_recall_m: 0.6133\n","Epoch 6/20\n","13/13 [==============================] - 112s 9s/step - loss: 0.7959 - accuracy: 0.5568 - f1_m: 0.5583 - precision_m: 0.5583 - recall_m: 0.5584 - val_loss: 1.7095 - val_accuracy: 0.5650 - val_f1_m: 0.5914 - val_precision_m: 0.5816 - val_recall_m: 0.6016\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 7/20\n","13/13 [==============================] - 114s 9s/step - loss: 0.7052 - accuracy: 0.6170 - f1_m: 0.6190 - precision_m: 0.6167 - recall_m: 0.6213 - val_loss: 1.8481 - val_accuracy: 0.5950 - val_f1_m: 0.5947 - val_precision_m: 0.5881 - val_recall_m: 0.6016\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 8/20\n","13/13 [==============================] - 110s 9s/step - loss: 0.7019 - accuracy: 0.6306 - f1_m: 0.6370 - precision_m: 0.6330 - recall_m: 0.6411 - val_loss: 1.9054 - val_accuracy: 0.6150 - val_f1_m: 0.6597 - val_precision_m: 0.6893 - val_recall_m: 0.6328\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 9/20\n","13/13 [==============================] - 111s 9s/step - loss: 0.6348 - accuracy: 0.6421 - f1_m: 0.6485 - precision_m: 0.6542 - recall_m: 0.6429 - val_loss: 2.2495 - val_accuracy: 0.6000 - val_f1_m: 0.5952 - val_precision_m: 0.6141 - val_recall_m: 0.5781\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 10/20\n","13/13 [==============================] - 111s 9s/step - loss: 0.6212 - accuracy: 0.6846 - f1_m: 0.6816 - precision_m: 0.6815 - recall_m: 0.6817 - val_loss: 2.3224 - val_accuracy: 0.5600 - val_f1_m: 0.5210 - val_precision_m: 0.5307 - val_recall_m: 0.5117\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 11/20\n","13/13 [==============================] - 110s 9s/step - loss: 0.6309 - accuracy: 0.6858 - f1_m: 0.6868 - precision_m: 0.6867 - recall_m: 0.6869 - val_loss: 2.3709 - val_accuracy: 0.5800 - val_f1_m: 0.5814 - val_precision_m: 0.5848 - val_recall_m: 0.5781\n","Epoch 12/20\n","13/13 [==============================] - 110s 9s/step - loss: 0.7104 - accuracy: 0.6728 - f1_m: 0.6758 - precision_m: 0.6778 - recall_m: 0.6738 - val_loss: 2.4882 - val_accuracy: 0.5850 - val_f1_m: 0.6211 - val_precision_m: 0.6211 - val_recall_m: 0.6211\n","Epoch 13/20\n","13/13 [==============================] - 110s 9s/step - loss: 0.6158 - accuracy: 0.6752 - f1_m: 0.6854 - precision_m: 0.6738 - recall_m: 0.7053 - val_loss: 2.3389 - val_accuracy: 0.6150 - val_f1_m: 0.6363 - val_precision_m: 0.6399 - val_recall_m: 0.6328\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 14/20\n","13/13 [==============================] - 111s 9s/step - loss: 0.5561 - accuracy: 0.7197 - f1_m: 0.7226 - precision_m: 0.7147 - recall_m: 0.7357 - val_loss: 2.8718 - val_accuracy: 0.6300 - val_f1_m: 0.6526 - val_precision_m: 0.6490 - val_recall_m: 0.6562\n","INFO:tensorflow:Assets written to: saved_weights_audio_RNN/assets\n","Epoch 15/20\n","13/13 [==============================] - 111s 9s/step - loss: 0.7798 - accuracy: 0.7032 - f1_m: 0.7085 - precision_m: 0.7057 - recall_m: 0.7114 - val_loss: 3.2060 - val_accuracy: 0.6000 - val_f1_m: 0.6445 - val_precision_m: 0.6445 - val_recall_m: 0.6445\n","Epoch 16/20\n","13/13 [==============================] - 110s 9s/step - loss: 0.8603 - accuracy: 0.7033 - f1_m: 0.7035 - precision_m: 0.7035 - recall_m: 0.7035 - val_loss: 3.5256 - val_accuracy: 0.5700 - val_f1_m: 0.6075 - val_precision_m: 0.6178 - val_recall_m: 0.5977\n","Epoch 17/20\n","13/13 [==============================] - 111s 9s/step - loss: 0.8582 - accuracy: 0.7033 - f1_m: 0.7034 - precision_m: 0.7034 - recall_m: 0.7034 - val_loss: 3.6745 - val_accuracy: 0.5700 - val_f1_m: 0.6042 - val_precision_m: 0.6109 - val_recall_m: 0.5977\n","Epoch 18/20\n","13/13 [==============================] - 111s 9s/step - loss: 0.8712 - accuracy: 0.7040 - f1_m: 0.7047 - precision_m: 0.7047 - recall_m: 0.7047 - val_loss: 3.6339 - val_accuracy: 0.5700 - val_f1_m: 0.6042 - val_precision_m: 0.6109 - val_recall_m: 0.5977\n","Epoch 19/20\n","13/13 [==============================] - 111s 9s/step - loss: 0.8819 - accuracy: 0.7046 - f1_m: 0.7056 - precision_m: 0.7056 - recall_m: 0.7056 - val_loss: 3.6350 - val_accuracy: 0.5550 - val_f1_m: 0.6042 - val_precision_m: 0.6109 - val_recall_m: 0.5977\n","Epoch 20/20\n","13/13 [==============================] - 110s 9s/step - loss: 0.8602 - accuracy: 0.7034 - f1_m: 0.7037 - precision_m: 0.7037 - recall_m: 0.7037 - val_loss: 3.6888 - val_accuracy: 0.5700 - val_f1_m: 0.6042 - val_precision_m: 0.6109 - val_recall_m: 0.5977\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W6w-G-nesQ8W","executionInfo":{"status":"ok","timestamp":1616764885220,"user_tz":-180,"elapsed":485,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"ac7d5304-3dde-4758-af5c-a4783c51fef4"},"source":["\n","params2 = {\n","    'folder' : \"AudioDataset\",\n","    'batch_size':BATCH_SIZE,\n","    'n_classes':num_classes,\n","    'shuffle':True,\n","    'csv_file':'audio_statistics_test.csv',\n","    'main_genre':main_genre ,\n","    'x_label' : 'ID_Frame',\n","    'y_label': 'Genres_subset'}\n","test_generator = DataGenerator(**params2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Found data size:  84\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B0l3LiQxsn-g","executionInfo":{"status":"ok","timestamp":1616764971923,"user_tz":-180,"elapsed":61990,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"9529568e-9d59-45aa-9694-b32ede72b08d"},"source":["\n","pred=model.predict(test_generator,\n","    verbose=1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2/2 [==============================] - 8s 2s/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hCxW0Pddsv0t","executionInfo":{"status":"ok","timestamp":1616764971925,"user_tz":-180,"elapsed":43437,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"e8a82134-e09d-4a76-880f-d8435e75c231"},"source":["print(pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]\n"," [0. 1.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Vs_tGGLmsxmx"},"source":["pred_bool = (pred >0.3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":249},"id":"IEqu2Ehcs0EA","executionInfo":{"status":"error","timestamp":1616764988919,"user_tz":-180,"elapsed":510,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"3507f3c8-3c64-42a1-c640-6b2f6a3301cb"},"source":["predictions = pred_bool.astype(int)\n","\n","#columns should be the same order of y_col\n","results=pd.DataFrame(predictions, columns=main_genre)\n","results[\"Filenames\"]=test_generator.\n","ordered_cols=[\"Filenames\"]+main_genre\n","results=results[ordered_cols]#To get the same column order\n","results.to_csv(\"results.csv\",index=False)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-59-dc96f64d9a88>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#columns should be the same order of y_col\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmain_genre\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Filenames\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest_generator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilenames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mordered_cols\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Filenames\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mmain_genre\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mordered_cols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;31m#To get the same column order\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'DataGenerator' object has no attribute 'filenames'"]}]},{"cell_type":"code","metadata":{"id":"ZvNQSiivs4S-"},"source":["print(predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8i0FP3XMs57M"},"source":["predictions=[]\n","for row in pred_bool:\n","    l=[]\n","    for index,cls in enumerate(row):\n","        if cls:\n","            l.append(main_genre[index])\n","    predictions.append(\",\".join(l))\n","print(predictions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B7e8On9iCH-p"},"source":["from keras.models import Sequential\n","from keras.layers import LSTM,Dropout,Dense,Activation\n","from keras.layers.embeddings import Embedding\n","from keras.preprocessing import sequence\n","model2 = Sequential()\n","model2.add(LSTM(\n","        128,\n","        input_shape=(SAMPLING_RATE, 1),\n","        return_sequences=True\n","    ))\n","model2.add(Dropout(0.3))\n","model2.add(LSTM(256, return_sequences=True))\n","\n","model2.add(Dense(256))\n","model2.add(Dropout(0.3))\n","model2.add(Dense(num_classes))\n","model2.add(Activation('sigmoid'))\n","model2.compile(loss=loss_array,metrics= metrics_array, optimizer='rmsprop')\n","\n","\n","filepath2 = \"LSTM/weights-improvement-{epoch:02d}-{loss:.4f}-bigger.hdf5\"  \n","\n","checkpoint = ModelCheckpoint(\n","    filepath, monitor='loss', \n","    verbose=0,        \n","    save_best_only=True,        \n","    mode='min'\n",")    \n","callbacks_list = [checkpoint]     \n","\n","main_genre =  ['Adventure', 'Comedy', 'Fantasy','Romance',  'Action',  'Horror']\n","history2 = model2.fit(train_generator,validation_data=valid_generator, epochs=20, batch_size=BATCH_SIZE, \n","                      class_weight=class_weights,callbacks=callbacks_list)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GpHtSCXjoEnu"},"source":["import plotly.graph_objects as go\n","import matplotlib.pyplot as plt\n","plt.clf()\n","fig = go.Figure()\n","fig.add_trace(go.Scatter(\n","                        y=history.history['loss'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_loss'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Loss for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='val_loss')\n","fig.show()\n","plt.clf()\n","fig = go.Figure()\n","\n","fig.add_trace(go.Scatter(\n","                        y=history.history['accuracy'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_accuracy'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Accuracy for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='Accuracy')\n","fig.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rOk-xpdL-2ji"},"source":["#Using keras tuner\n","https://www.tensorflow.org/tutorials/keras/keras_tuner"]},{"cell_type":"code","metadata":{"id":"7JDtb0raX-1S","colab":{"base_uri":"https://localhost:8080/","height":134},"executionInfo":{"status":"error","timestamp":1619450798588,"user_tz":-180,"elapsed":639,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"}},"outputId":"c9880520-5285-4718-c307-aeb165a4103d"},"source":["def residual_block(x, filters, conv_num=3, activation=\"relu\"):\n","    # Shortcut\n","    s = keras.layers.Conv1D(filters, 1, padding=\"same\")(x)\n","    for i in range(conv_num - 1):\n","        x = keras.layers.Conv1D(filters, 3, padding=\"same\")(x)\n","        x = keras.layers.Activation(activation)(x)\n","    x = keras.layers.Conv1D(filters, 3, padding=\"same\")(x)\n","    x = keras.layers.Add()([x, s])\n","    x = keras.layers.Activation(activation)(x)\n","    return keras.layers.MaxPool1D(pool_size=2, strides=2)(x)\n","\n","\n","def build_model(hp):\n","    inputs = keras.layers.Input(shape=(SAMPLING_RATE//2,1), name=\"input\")\n","    hp_units = hp.Int('units', min_value=32, max_value=512, step=128)\n","\n","    x = residual_block(inputs, 16, 2)\n","    x = residual_block(x, 32, 2)\n","    x = residual_block(x, 64, 3)\n","    x = residual_block(x, 128, 3)\n","    x = residual_block(x, 128, 3)\n","\n","    x = keras.layers.AveragePooling1D(pool_size=3, strides=3)(x)\n","    x = keras.layers.Flatten()(x)\n","    x = keras.layers.Dense(256, activation=\"relu\")(x)\n","    x = keras.layers.Dense(128, activation=\"relu\")(x)\n","\n","    outputs = keras.layers.Dense(num_classes, activation=\"softmax\", name=\"output\")(x)\n","\n","    outputs2 =  tf.keras.layers.Dense(units=hp_units, activation='relu')\n","    hp_learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])\n","    model = keras.models.Model(inputs=inputs, outputs=outputs)\n","    # Compile the model using Adam's default learning rate\n","    model.compile(optimizer=keras.optimizers.Adam(learning_rate=hp_learning_rate),\n","                  loss = [custom_hamming_loss,f1_loss],\n","                  metrics =['accuracy', f1_m,precision_m,recall_m],)\n","    print(model.summary())\n","    return model\n"],"execution_count":1,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-26d1966f764f>\"\u001b[0;36m, line \u001b[0;32m36\u001b[0m\n\u001b[0;31m    metrics =['accuracy', f1_m,precision_m,recall_m],tf.keras.metrics.FalsePositives(),tf.keras.metrics.FalseNegatives())\u001b[0m\n\u001b[0m                                                    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m positional argument follows keyword argument\n"]}]},{"cell_type":"code","metadata":{"id":"W0FqzdZrlu_p"},"source":["tuner = kt.Hyperband(build_model,\n","                     objective='val_accuracy',\n","                     max_epochs=109,\n","                     factor=3,\n","                     directory='resnet_audio',\n","                     project_name='resnet_audio')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vPAVVelimN2n"},"source":["# Fit the model\n","STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n","STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n","\n","stop_early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\n","tuner.search(train_generator,validation_data=valid_generator, epochs=20, batch_size=32, \n","             callbacks=[stop_early], use_multiprocessing=True, workers=16)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wO-kqK6dnnDt"},"source":["model = tuner.hypermodel.build(best_hps)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"puVWwuuhnr76"},"source":["# Build the model with the optimal hyperparameters and train it on the data for 50 epochs\n","model = tuner.hypermodel.build(best_hps)\n","history = model.fit(train_generator,validation_data=valid_generator, epochs=20, batch_size=32, \n","             callbacks=[stop_early])\n","\n","val_acc_per_epoch = history.history['val_accuracy']\n","best_epoch = val_acc_per_epoch.index(max(val_acc_per_epoch)) + 1\n","print('Best epoch: %d' % (best_epoch,))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rj9Vjcban2Au"},"source":["import plotly.graph_objects as go\n","import matplotlib.pyplot as plt\n","plt.clf()\n","fig = go.Figure()\n","fig.add_trace(go.Scatter(\n","                        y=history.history['loss'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_loss'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Loss for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='val_loss')\n","fig.show()\n","plt.clf()\n","fig = go.Figure()\n","\n","fig.add_trace(go.Scatter(\n","                        y=history.history['accuracy'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_accuracy'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Accuracy for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='Accuracy')\n","fig.show()"],"execution_count":null,"outputs":[]}]}