{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19821,"status":"ok","timestamp":1617970268496,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"ZqHOqqVgJwu6","outputId":"54da39e0-0ee7-49f8-9435-bc505bc456fc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/gdrive\n","MyDrive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","!ls /content/gdrive"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5070,"status":"ok","timestamp":1617970277701,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"wlpb-irbBa5D","outputId":"c00b051e-911e-4422-c163-8e0b3f80e022"},"outputs":[{"name":"stdout","output_type":"stream","text":["Uninstalling Keras-Preprocessing-1.1.2:\n","  Would remove:\n","    /usr/local/lib/python3.7/dist-packages/Keras_Preprocessing-1.1.2.dist-info/*\n","    /usr/local/lib/python3.7/dist-packages/keras_preprocessing/*\n","Proceed (y/n)? y\n","  Successfully uninstalled Keras-Preprocessing-1.1.2\n"]}],"source":["pip uninstall keras-preprocessing"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4769,"status":"ok","timestamp":1617970389675,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"khbYwHvoYo5V","outputId":"7c727365-563b-49b7-e100-cb7d21c1ceda"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting git+https://github.com/keras-team/keras-preprocessing.git\n","  Cloning https://github.com/keras-team/keras-preprocessing.git to /tmp/pip-req-build-cs_6anqx\n","  Running command git clone -q https://github.com/keras-team/keras-preprocessing.git /tmp/pip-req-build-cs_6anqx\n","Requirement already satisfied: numpy\u003e=1.9.1 in /usr/local/lib/python3.7/dist-packages (from Keras-Preprocessing==1.1.2) (1.19.5)\n","Building wheels for collected packages: Keras-Preprocessing\n","  Building wheel for Keras-Preprocessing (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for Keras-Preprocessing: filename=Keras_Preprocessing-1.1.2-cp37-none-any.whl size=43617 sha256=e32def55ba3aa4a54b2d6a8459abd56fcfc236dd5445bc8c93e4679a0d231755\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-6ffxghgu/wheels/03/a0/39/171f6040d36f36c71168dc69afa81334351b20955dc36ce932\n","Successfully built Keras-Preprocessing\n","Installing collected packages: Keras-Preprocessing\n","Successfully installed Keras-Preprocessing-1.1.2\n"]}],"source":["pip install git+https://github.com/keras-team/keras-preprocessing.git"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9197,"status":"ok","timestamp":1617970395444,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"FrHLBwj0YL22","outputId":"803bc812-7e6b-4848-f9d8-ff39af951a8e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting keras-tuner-1.0.2rc0\n","  Cloning https://github.com/keras-team/keras-tuner.git (to revision 1.0.2rc0) to /tmp/pip-install-jnruthri/keras-tuner-1.0.2rc0\n","  Running command git clone -q https://github.com/keras-team/keras-tuner.git /tmp/pip-install-jnruthri/keras-tuner-1.0.2rc0\n","  Running command git checkout -q 5d16a5a9cd883fe6366d523a5e59b72cfefb7f77\n","\u001b[33m  WARNING: Generating metadata for package keras-tuner-1.0.2rc0 produced metadata for project name keras-tuner. Fix your #egg=keras-tuner-1.0.2rc0 fragments.\u001b[0m\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (20.9)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.16.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.19.5)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.8.9)\n","Collecting terminaltables\n","  Downloading https://files.pythonhosted.org/packages/9b/c4/4a21174f32f8a7e1104798c445dacdc1d4df86f2f26722767034e4de4bff/terminaltables-3.1.0.tar.gz\n","Collecting colorama\n","  Downloading https://files.pythonhosted.org/packages/44/98/5b86278fbbf250d239ae0ecb724f8572af1c91f4a11edf4d36a206189440/colorama-0.4.4-py2.py3-none-any.whl\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (4.41.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (2.23.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.4.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.22.2.post1)\n","Requirement already satisfied: pyparsing\u003e=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging-\u003ekeras-tuner) (2.4.7)\n","Requirement already satisfied: certifi\u003e=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests-\u003ekeras-tuner) (2020.12.5)\n","Requirement already satisfied: chardet\u003c4,\u003e=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-\u003ekeras-tuner) (3.0.4)\n","Requirement already satisfied: idna\u003c3,\u003e=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-\u003ekeras-tuner) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,\u003c1.26,\u003e=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests-\u003ekeras-tuner) (1.24.3)\n","Requirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-\u003ekeras-tuner) (1.0.1)\n","Building wheels for collected packages: keras-tuner, keras-tuner, terminaltables\n","  Building wheel for keras-tuner (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-tuner: filename=keras_tuner-1.0.2rc0-cp37-none-any.whl size=89059 sha256=b7123fc2a0145c80bc961b60ad63a8585bb5dc9237e473a7a897d78abc6b8f08\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-mus0p9m_/wheels/ab/97/20/917008aafbd47b823fb0bc43989739b1195c682036641a49d7\n","  Building wheel for keras-tuner (setup.py) ... \u001b[?25lerror\n","\u001b[31m  ERROR: Failed building wheel for keras-tuner\u001b[0m\n","\u001b[?25h  Running setup.py clean for keras-tuner\n","\u001b[31m  ERROR: Failed cleaning build dir for keras-tuner\u001b[0m\n","  Building wheel for terminaltables (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for terminaltables: filename=terminaltables-3.1.0-cp37-none-any.whl size=15356 sha256=574d9cf0fb656eb64e943dea00f237b3c0e02f255d9b1e29a3e65a86136b538b\n","  Stored in directory: /root/.cache/pip/wheels/30/6b/50/6c75775b681fb36cdfac7f19799888ef9d8813aff9e379663e\n","Successfully built keras-tuner terminaltables\n","Failed to build keras-tuner\n","Installing collected packages: terminaltables, colorama, keras-tuner\n","Successfully installed colorama-0.4.4 keras-tuner-1.0.2rc0 terminaltables-3.1.0\n"]}],"source":["pip install git+https://github.com/keras-team/keras-tuner.git@1.0.2rc0#egg=keras-tuner-1.0.2rc0"]},{"cell_type":"markdown","metadata":{"id":"cb_-h8aknUnN"},"source":["# Imports etc."]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":665,"status":"ok","timestamp":1617971592748,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"VZrXvU8t8eyj","outputId":"e4d3c2ef-6aa8-4382-fdf0-5a2c05b41436"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/gdrive/My Drive/Thesis/MovieLens20M\n"]}],"source":["%cd /content/gdrive/My\\ Drive/Thesis/MovieLens20M"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":1050,"status":"ok","timestamp":1617971593136,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"SZ_wT5rp27J2"},"outputs":[],"source":["import glob\n","import os\n","from keras.models import Sequential\n","from keras import Input, Model\n","import tensorflow as tf\n","\"\"\"Import from keras_preprocessing not from keras.preprocessing, because Keras may or maynot contain the features discussed here depending upon when you read this article, until the keras_preprocessed library is updated in Keras use the github version.\"\"\"\n","from keras_preprocessing.image import ImageDataGenerator\n","from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization\n","from keras.layers import Conv2D, MaxPooling2D\n","from keras import regularizers, optimizers\n","from keras.callbacks import ModelCheckpoint\n","import pandas as pd\n","import numpy as np\n","from tqdm import trange\n","import librosa\n","import matplotlib.pyplot as plt\n","import librosa.display\n","import kerastuner as kt\n","import keras\n","import cv2\n","import warnings"]},{"cell_type":"markdown","metadata":{"id":"TzM0QxS_noT2"},"source":["#Important parameters"]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":721,"status":"ok","timestamp":1617972748008,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"i4n1EpR1nnxK"},"outputs":[],"source":["img_dim = 100\n","input_shape = (img_dim,img_dim,3)\n","num_classes = len(main_genre)\n","df = pd.read_csv(\"audios_visualized_train.csv\")\n","main_genre = [\"Comedy\",\"Horror\"]"]},{"cell_type":"markdown","metadata":{"id":"iQhHSHgiCT8C"},"source":["#Extract audio as images\n"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":682,"status":"ok","timestamp":1617972749330,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"ct_3-tARwO51","outputId":"6285e00e-c208-452f-80fe-8a613466ce52"},"outputs":[{"name":"stdout","output_type":"stream","text":["Done.\n"]}],"source":["\n","warnings.filterwarnings('ignore')\n","def spec_gen(filename,dest):\n","    y, sr = librosa.load(filename, sr=None)    \n","    mel = librosa.feature.melspectrogram(y=y, sr=sr)\n","    rescale = librosa.power_to_db(mel**2,ref=np.max)\n","    fig = plt.figure(figsize=(1, 1),frameon=False).add_subplot(111)\n","    fig.set_frame_on(False)\n","    \n","    librosa.display.specshow(rescale, sr=sr,x_axis='time', y_axis='log')\n","    fig.axes.get_xaxis().set_visible(False)\n","    fig.axes.get_yaxis().set_visible(False)\n","    plt.savefig(dest, dpi=400, bbox_inches='tight',pad_inches=0)\n","    plt.close('all')    \n","    del fig, y, sr,mel,rescale\n","\n","    \n","def convert_all():\n","    audio_dest='AudioDataset'\n","    imgs_dest ='AudioVisualizedDataset'\n","    audios = os.listdir('AudioDataset')\n","    destination = os.listdir('AudioVisualizedDataset')\n","    imgs =   [i.split('.jpg', 1)[0] for i in destination]\n","      \n","    for audio in audios:\n","        id = audio.split('.wav')[0]\n","        if id not in imgs:\n","            print(\"Doing file_id\", id)\n","            spec_gen(audio_dest + '/' + audio , imgs_dest + '/'+ str(id) + '.jpg')\n","    print(\"Done.\")\n","convert_all()"]},{"cell_type":"markdown","metadata":{"id":"fzRQvhHvjqko"},"source":["#Start reading the data from csv."]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":652,"status":"ok","timestamp":1617972751022,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"dLbwO_ZxLXsw","outputId":"7db75a24-5c9c-4f08-d784-efaed65b12d2"},"outputs":[{"name":"stdout","output_type":"stream","text":["      ID_Frame  ... Genres_subset\n","2282      8892  ...      [Horror]\n","82        3208  ...      [Comedy]\n","100       2797  ...      [Comedy]\n","290       8705  ...      [Comedy]\n","164       1446  ...      [Comedy]\n","...        ...  ...           ...\n","421       8628  ...      [Comedy]\n","3854      3563  ...      [Horror]\n","1140      8507  ...      [Horror]\n","215       3071  ...      [Comedy]\n","415       4613  ...      [Comedy]\n","\n","[864 rows x 4 columns]\n"]}],"source":["from collections import Counter\n","\n","def get_equal_subsets(genres,df,save=True,eliminate_multilabels=True):\n","\n","    #Drop unnamed ranges.\n","    df.drop(df.columns[df.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)\n","    #Save back to statistics\n","    df.to_csv(\"audios_visualized_train.csv\")\n","    df[\"Genres\"]=df[\"Genres\"].apply(lambda x:x.strip('][').replace('\\'','').replace(' ','').split(\",\"))\n","    #Only work with these genres for now.\n","    main_genre = genres\n","    main_set = set(main_genre)\n","    df['Genres_subset'] = df['Genres'].apply(lambda x: list(set(x).intersection(main_set))  )\n","    #If labels are empty remove from dataset.\n","    df = df[df['Genres_subset'].map(lambda d: len(d)) \u003e 0]\n","   \n","    #find which has lowest sample.\n","    counter = Counter([x for genres in df['Genres_subset'] for x in genres])   \n","    bottle_neck= min(counter, key=counter.get)\n","    df['Genres_subset'] = df['Genres_subset'].map(lambda d: [bottle_neck] if any([e == bottle_neck for e in d]) else d )\n","    df_d = df[df['Genres_subset'].map(lambda d:  d[0] is bottle_neck)   ]\n","    counter = Counter([x for genres in df['Genres_subset'] for x in genres]) \n","    \n","    #eliminate multilabels\n","    if eliminate_multilabels:\n","        df = df[df['Genres_subset'].map(lambda d: len(d)) \u003c2 ]\n","    counter = Counter([x for genres in df['Genres_subset'] for x in genres]) \n","    min_val = counter[bottle_neck]\n","\n","    other_genres = [g for g in genres if g is not bottle_neck]\n","    #randomly get a part of the other genres\n","    \n","    for gen in other_genres:\n","\n","        df_g = df[df['Genres_subset'].map(lambda d:  d[0] is gen)   ]\n","        df_g = df_g.sample(frac=1).reset_index(drop=True)\n","        df_d=df_d.append(df_g[:min_val])\n","    df_d = df_d.sample(frac=1)\n","    if save:\n","        df_d.to_csv(\"mel_dataset.csv\")\n","        \n","    print(df_d)\n","    \n","    counter = Counter([x for genres in df_d['Genres_subset'] for x in genres]) \n","    return df_d\n","\n","df = get_equal_subsets(main_genre,df)\n","df[\"ID_Frame\"]=df[\"ID_Frame\"].astype(str)+\".jpg\""]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":579,"status":"ok","timestamp":1617972780087,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"eWgsEYsk1hT4","outputId":"5fe3fa5c-2bd3-4ac1-b2ea-892767b08bcb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Training set size 500\n","Validation set size 300\n","Test set size 64\n"]}],"source":["num_classes = len(main_genre)\n","train_files = df[:500]\n","val_files = df[500:800 ]\n","test_files = df[800 :]\n","print('Training set size', len(train_files))\n","print('Validation set size', len(val_files))\n","print('Test set size', len(test_files))\n"]},{"cell_type":"markdown","metadata":{"id":"hFolZyUU-vrt"},"source":["#Data generator"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":587,"status":"ok","timestamp":1617972782618,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"ZnGEscNVm59X","outputId":"500e9eec-6fc6-4da1-dbfd-6f72b5d62fc4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 500 validated image filenames belonging to 2 classes.\n","Found 300 validated image filenames belonging to 2 classes.\n"]}],"source":["\n","datagen=ImageDataGenerator(rescale=1./255.,validation_split=0.25)\n","\n","test_datagen=ImageDataGenerator(rescale=1./255.,validation_split=0.25)\n","train_generator=datagen.flow_from_dataframe(\n","    dataframe=train_files,\n","    directory=\"AudioVisualizedDataset\",\n","    x_col=\"ID_Frame\",\n","    y_col=\"Genres_subset\",\n","    batch_size=64,\n","    color_mode=\"rgb\",\n","    seed=42,\n","    shuffle=True,\n","    class_mode=\"categorical\",\n","    classes=main_genre,\n","    target_size=(img_dim,img_dim))\n","\n","valid_generator=test_datagen.flow_from_dataframe(\n","    dataframe=val_files,\n","    directory=\"AudioVisualizedDataset\",\n","    x_col=\"ID_Frame\",\n","    y_col=\"Genres_subset\",\n","    batch_size=64,\n","    color_mode=\"rgb\",\n","    seed=42,\n","    shuffle=True,\n","    class_mode=\"categorical\",\n","    classes=main_genre,\n","    target_size=(img_dim,img_dim))"]},{"cell_type":"markdown","metadata":{"id":"hz2FHQ_o-yzI"},"source":["#Custom loss \u0026 metrics"]},{"cell_type":"code","execution_count":39,"metadata":{"executionInfo":{"elapsed":493,"status":"ok","timestamp":1617972785527,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"OtPqB8mzZTA5"},"outputs":[],"source":["def recall_m(y_true, y_pred):\n","    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n","    recall = true_positives / (possible_positives + K.epsilon())\n","    return recall\n","\n","def precision_m(y_true, y_pred):\n","    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n","    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n","    precision = true_positives / (predicted_positives + K.epsilon())\n","    return precision\n","\n","def f1_m(y_true, y_pred):\n","    precision = precision_m(y_true, y_pred)\n","    recall = recall_m(y_true, y_pred)\n","    return 2*((precision*recall)/(precision+recall+K.epsilon()))\n","import keras.backend as K\n","def custom_hamming_loss(y_true, y_pred):\n","    # Avoid divide by 0\n","    y_pred = K.clip(y_pred, K.epsilon(), 1 - K.epsilon())\n","    # Multi-task loss\n","    return K.mean(K.sum(- y_true * K.log(y_pred) - (1 - y_true) * K.log(1 - y_pred), axis=1))\n","\n","\n","def f1_loss(y_true, y_pred):\n","    \n","    tp = K.sum(K.cast(y_true*y_pred, 'float'), axis=0)\n","    tn = K.sum(K.cast((1-y_true)*(1-y_pred), 'float'), axis=0)\n","    fp = K.sum(K.cast((1-y_true)*y_pred, 'float'), axis=0)\n","    fn = K.sum(K.cast(y_true*(1-y_pred), 'float'), axis=0)\n","\n","    p = tp / (tp + fp + K.epsilon())\n","    r = tp / (tp + fn + K.epsilon())\n","\n","    f1 = 2*p*r / (p+r+K.epsilon())\n","    f1 = tf.where(tf.is_nan(f1), tf.zeros_like(f1), f1)\n","    return 1 - K.mean(f1)\n","    \n","def generator_wrapper(generator):\n","    for batch_x,batch_y in generator:\n","        yield (batch_x,np.array([batch_y[:,i] for i in range(num_classes)]).transpose())"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":909,"status":"ok","timestamp":1617972785947,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"C7cH-FT4js1h","outputId":"e96fc154-721c-4542-8e0d-90efb5a90edf"},"outputs":[{"name":"stdout","output_type":"stream","text":["Class weights are: {1: 1.0833333333333333, 0: 1.0}\n"]}],"source":["from collections import Counter\n","\n","counter = Counter([x for main_genre in train_generator.classes for x in main_genre])                          \n","max_val = float(max(counter.values())) \n","\n","num_data = 1600\n","class_weights = {class_id : max_val/num_images for class_id, num_images in counter.items()}     \n","print(\"Class weights are:\" ,class_weights)\n"]},{"cell_type":"markdown","metadata":{"id":"0YAEDTHynGCQ"},"source":["#Old models\n"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1765,"status":"ok","timestamp":1617972787723,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"gZJI4lEYkIwS","outputId":"79afe50a-9863-4599-b42c-4e8698f66ee0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input (InputLayer)              [(None, 100, 100, 3) 0                                            \n","__________________________________________________________________________________________________\n","conv2d_10 (Conv2D)              (None, 100, 100, 16) 448         input[0][0]                      \n","__________________________________________________________________________________________________\n","activation (Activation)         (None, 100, 100, 16) 0           conv2d_10[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_11 (Conv2D)              (None, 100, 100, 16) 2320        activation[0][0]                 \n","__________________________________________________________________________________________________\n","conv2d_9 (Conv2D)               (None, 100, 100, 16) 208         input[0][0]                      \n","__________________________________________________________________________________________________\n","add (Add)                       (None, 100, 100, 16) 0           conv2d_11[0][0]                  \n","                                                                 conv2d_9[0][0]                   \n","__________________________________________________________________________________________________\n","activation_1 (Activation)       (None, 100, 100, 16) 0           add[0][0]                        \n","__________________________________________________________________________________________________\n","max_pooling2d_3 (MaxPooling2D)  (None, 50, 50, 16)   0           activation_1[0][0]               \n","__________________________________________________________________________________________________\n","conv2d_13 (Conv2D)              (None, 50, 50, 32)   4640        max_pooling2d_3[0][0]            \n","__________________________________________________________________________________________________\n","activation_2 (Activation)       (None, 50, 50, 32)   0           conv2d_13[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_14 (Conv2D)              (None, 50, 50, 32)   9248        activation_2[0][0]               \n","__________________________________________________________________________________________________\n","conv2d_12 (Conv2D)              (None, 50, 50, 32)   2080        max_pooling2d_3[0][0]            \n","__________________________________________________________________________________________________\n","add_1 (Add)                     (None, 50, 50, 32)   0           conv2d_14[0][0]                  \n","                                                                 conv2d_12[0][0]                  \n","__________________________________________________________________________________________________\n","activation_3 (Activation)       (None, 50, 50, 32)   0           add_1[0][0]                      \n","__________________________________________________________________________________________________\n","max_pooling2d_4 (MaxPooling2D)  (None, 25, 25, 32)   0           activation_3[0][0]               \n","__________________________________________________________________________________________________\n","conv2d_16 (Conv2D)              (None, 25, 25, 64)   18496       max_pooling2d_4[0][0]            \n","__________________________________________________________________________________________________\n","activation_4 (Activation)       (None, 25, 25, 64)   0           conv2d_16[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_17 (Conv2D)              (None, 25, 25, 64)   36928       activation_4[0][0]               \n","__________________________________________________________________________________________________\n","activation_5 (Activation)       (None, 25, 25, 64)   0           conv2d_17[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_18 (Conv2D)              (None, 25, 25, 64)   36928       activation_5[0][0]               \n","__________________________________________________________________________________________________\n","conv2d_15 (Conv2D)              (None, 25, 25, 64)   8256        max_pooling2d_4[0][0]            \n","__________________________________________________________________________________________________\n","add_2 (Add)                     (None, 25, 25, 64)   0           conv2d_18[0][0]                  \n","                                                                 conv2d_15[0][0]                  \n","__________________________________________________________________________________________________\n","activation_6 (Activation)       (None, 25, 25, 64)   0           add_2[0][0]                      \n","__________________________________________________________________________________________________\n","max_pooling2d_5 (MaxPooling2D)  (None, 12, 12, 64)   0           activation_6[0][0]               \n","__________________________________________________________________________________________________\n","conv2d_20 (Conv2D)              (None, 12, 12, 128)  73856       max_pooling2d_5[0][0]            \n","__________________________________________________________________________________________________\n","activation_7 (Activation)       (None, 12, 12, 128)  0           conv2d_20[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_21 (Conv2D)              (None, 12, 12, 128)  147584      activation_7[0][0]               \n","__________________________________________________________________________________________________\n","activation_8 (Activation)       (None, 12, 12, 128)  0           conv2d_21[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_22 (Conv2D)              (None, 12, 12, 128)  147584      activation_8[0][0]               \n","__________________________________________________________________________________________________\n","conv2d_19 (Conv2D)              (None, 12, 12, 128)  32896       max_pooling2d_5[0][0]            \n","__________________________________________________________________________________________________\n","add_3 (Add)                     (None, 12, 12, 128)  0           conv2d_22[0][0]                  \n","                                                                 conv2d_19[0][0]                  \n","__________________________________________________________________________________________________\n","activation_9 (Activation)       (None, 12, 12, 128)  0           add_3[0][0]                      \n","__________________________________________________________________________________________________\n","max_pooling2d_6 (MaxPooling2D)  (None, 6, 6, 128)    0           activation_9[0][0]               \n","__________________________________________________________________________________________________\n","conv2d_24 (Conv2D)              (None, 6, 6, 128)    147584      max_pooling2d_6[0][0]            \n","__________________________________________________________________________________________________\n","activation_10 (Activation)      (None, 6, 6, 128)    0           conv2d_24[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_25 (Conv2D)              (None, 6, 6, 128)    147584      activation_10[0][0]              \n","__________________________________________________________________________________________________\n","activation_11 (Activation)      (None, 6, 6, 128)    0           conv2d_25[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_26 (Conv2D)              (None, 6, 6, 128)    147584      activation_11[0][0]              \n","__________________________________________________________________________________________________\n","conv2d_23 (Conv2D)              (None, 6, 6, 128)    65664       max_pooling2d_6[0][0]            \n","__________________________________________________________________________________________________\n","add_4 (Add)                     (None, 6, 6, 128)    0           conv2d_26[0][0]                  \n","                                                                 conv2d_23[0][0]                  \n","__________________________________________________________________________________________________\n","activation_12 (Activation)      (None, 6, 6, 128)    0           add_4[0][0]                      \n","__________________________________________________________________________________________________\n","max_pooling2d_7 (MaxPooling2D)  (None, 3, 3, 128)    0           activation_12[0][0]              \n","__________________________________________________________________________________________________\n","average_pooling2d (AveragePooli (None, 1, 1, 128)    0           max_pooling2d_7[0][0]            \n","__________________________________________________________________________________________________\n","flatten_5 (Flatten)             (None, 128)          0           average_pooling2d[0][0]          \n","__________________________________________________________________________________________________\n","dense_12 (Dense)                (None, 256)          33024       flatten_5[0][0]                  \n","__________________________________________________________________________________________________\n","dense_13 (Dense)                (None, 128)          32896       dense_12[0][0]                   \n","__________________________________________________________________________________________________\n","categorical_output (Dense)      (None, 2)            258         dense_13[0][0]                   \n","==================================================================================================\n","Total params: 1,096,066\n","Trainable params: 1,096,066\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}],"source":["def residual_block(x, filters, conv_num=3, activation=\"relu\"):\n","    # Shortcut\n","    s = keras.layers.Conv2D(filters, 2, padding=\"same\")(x)\n","    for i in range(conv_num - 1):\n","        x = keras.layers.Conv2D(filters, 3, padding=\"same\")(x)\n","        x = keras.layers.Activation(activation)(x)\n","    x = keras.layers.Conv2D(filters, 3, padding=\"same\")(x)\n","    x = keras.layers.Add()([x, s])\n","    x = keras.layers.Activation(activation)(x)\n","    return keras.layers.MaxPool2D(pool_size=2, strides=2)(x)\n","\n","\n","def build_model(input_shape, num_classes):\n","    inputs = keras.layers.Input(shape=input_shape, name=\"input\")\n","\n","    x = residual_block(inputs, 16, 2)\n","    x = residual_block(x, 32, 2)\n","    x = residual_block(x, 64, 3)\n","    x = residual_block(x, 128, 3)\n","    x = residual_block(x, 128, 3)\n","\n","    x = keras.layers.AveragePooling2D(pool_size=3, strides=3)(x)\n","    x = keras.layers.Flatten()(x)\n","    x = keras.layers.Dense(256, activation=\"relu\")(x)\n","    x = keras.layers.Dense(128, activation=\"relu\")(x)\n","\n","    outputs = keras.layers.Dense(num_classes, activation=\"sigmoid\",name=\"categorical_output\")(x)\n","    return keras.models.Model(inputs=inputs, outputs=outputs)\n","\n","model = build_model((img_dim,img_dim,3), num_classes)\n","\n","model.summary()\n","loss_array = [custom_hamming_loss,f1_loss]\n","metrics_array = ['accuracy',f1_m,precision_m,recall_m]\n","loss_weights = [0.6, 0.4]\n","\n","# Compile the model using Adam's default learning rate\n","model.compile(\n","    optimizer=keras.optimizers.Adam(learning_rate=0.01)\n","    , loss='binary_crossentropy', metrics='accuracy')"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":382},"executionInfo":{"elapsed":2790,"status":"error","timestamp":1617972788751,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"ampqBiN7j17P","outputId":"e323becf-5878-4eba-d4a3-cd79c520feb6"},"outputs":[{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-42-5b3c1d4c9402\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m               metrics=['accuracy'])\n\u001b[1;32m     22\u001b[0m history = model.fit(train_generator,validation_data=valid_generator, epochs=20, batch_size=64, class_weight=class_weights,\n\u001b[0;32m---\u003e 23\u001b[0;31m                     callbacks=callbacks_list)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1062\u001b[0m           \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1063\u001b[0m           \u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1064\u001b[0;31m           steps_per_execution=self._steps_per_execution)\n\u001b[0m\u001b[1;32m   1065\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1066\u001b[0m       \u001b[0;31m# Container that configures and calls `tf.keras.Callback`s.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, sample_weight, batch_size, steps_per_epoch, initial_epoch, epochs, shuffle, class_weight, max_queue_size, workers, use_multiprocessing, model, steps_per_execution)\u001b[0m\n\u001b[1;32m   1110\u001b[0m         \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m         \u001b[0mdistribution_strategy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mds_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1112\u001b[0;31m         model=model)\n\u001b[0m\u001b[1;32m   1113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1114\u001b[0m     \u001b[0mstrategy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mds_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, sample_weights, shuffle, workers, use_multiprocessing, max_queue_size, model, **kwargs)\u001b[0m\n\u001b[1;32m    907\u001b[0m         \u001b[0mmax_queue_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_queue_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    908\u001b[0m         \u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 909\u001b[0;31m         **kwargs)\n\u001b[0m\u001b[1;32m    910\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mstaticmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, sample_weights, workers, use_multiprocessing, max_queue_size, model, **kwargs)\u001b[0m\n\u001b[1;32m    777\u001b[0m     \u001b[0;31m# Since we have to know the dtype of the python generator when we build the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m     \u001b[0;31m# dataset, we have to look at a batch to infer the structure.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 779\u001b[0;31m     \u001b[0mpeek\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_peek_and_restore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    780\u001b[0m     \u001b[0mpeek\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_standardize_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpeek\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    781\u001b[0m     \u001b[0mpeek\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_tensorlike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpeek\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m_peek_and_restore\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    911\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mstaticmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    912\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_peek_and_restore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 913\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    915\u001b[0m   def _handle_multiprocessing(self, x, workers, use_multiprocessing,\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras_preprocessing/image/iterator.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, idx)\u001b[0m\n\u001b[1;32m     59\u001b[0m         index_array = self.index_array[self.batch_size * idx:\n\u001b[1;32m     60\u001b[0m                                        self.batch_size * (idx + 1)]\n\u001b[0;32m---\u003e 61\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_batches_of_transformed_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex_array\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras_preprocessing/image/iterator.py\u001b[0m in \u001b[0;36m_get_batches_of_transformed_samples\u001b[0;34m(self, index_array)\u001b[0m\n\u001b[1;32m    227\u001b[0m                            \u001b[0mtarget_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtarget_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m                            \u001b[0minterpolation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minterpolation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 229\u001b[0;31m                            keep_aspect_ratio=self.keep_aspect_ratio)\n\u001b[0m\u001b[1;32m    230\u001b[0m             \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimg_to_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata_format\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m             \u001b[0;31m# Pillow images should be closed after `load_img`,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras_preprocessing/image/utils.py\u001b[0m in \u001b[0;36mload_img\u001b[0;34m(path, grayscale, color_mode, target_size, interpolation, keep_aspect_ratio)\u001b[0m\n\u001b[1;32m    118\u001b[0m             \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 120\u001b[0;31m             \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpil_image\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    121\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         raise TypeError('path should be path-like or io.BytesIO'\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["filepath = 'mel_saved_weights/'\n","checkpoint = ModelCheckpoint(\n","    filepath, monitor='loss', \n","    verbose=0,        \n","    save_best_only=True,        \n","    mode='min'\n",")    \n","callbacks_list = [checkpoint]     \n","\n","\n","model = Sequential()\n","model.add(Conv2D(32, kernel_size=(4,4), activation='relu', input_shape=input_shape))\n","model.add(MaxPooling2D(pool_size=(4, 4)))\n","model.add(Dropout(0.3))\n","model.add(Flatten())\n","model.add(Dense(128, activation='relu'))\n","model.add(Dropout(0.3))\n","model.add(Dense(num_classes, activation='sigmoid'))\n","model.compile(loss=keras.losses.categorical_crossentropy,\n","              optimizer=keras.optimizers.Adadelta(),\n","              metrics=['accuracy'])\n","history = model.fit(train_generator,validation_data=valid_generator, epochs=20, batch_size=64, class_weight=class_weights,\n","                    callbacks=callbacks_list)"]},{"cell_type":"markdown","metadata":{"id":"AWJbg4s0nJQF"},"source":["#New Model\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"0_SOCNpdmVl3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/100\n","8/8 [==============================] - 63s 8s/step - loss: 0.6917 - accuracy: 0.5262 - val_loss: 0.6947 - val_accuracy: 0.4867\n","Epoch 2/100\n","8/8 [==============================] - 3s 328ms/step - loss: 0.6929 - accuracy: 0.5196 - val_loss: 0.6936 - val_accuracy: 0.4800\n","Epoch 3/100\n","8/8 [==============================] - 3s 327ms/step - loss: 0.6910 - accuracy: 0.5259 - val_loss: 0.6924 - val_accuracy: 0.5033\n","Epoch 4/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.6873 - accuracy: 0.5668 - val_loss: 0.6915 - val_accuracy: 0.5033\n","Epoch 5/100\n","8/8 [==============================] - 3s 323ms/step - loss: 0.6808 - accuracy: 0.5759 - val_loss: 0.6911 - val_accuracy: 0.5033\n","Epoch 6/100\n","8/8 [==============================] - 3s 328ms/step - loss: 0.6811 - accuracy: 0.5597 - val_loss: 0.6846 - val_accuracy: 0.5933\n","Epoch 7/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.6858 - accuracy: 0.5798 - val_loss: 0.6821 - val_accuracy: 0.5933\n","Epoch 8/100\n","8/8 [==============================] - 3s 330ms/step - loss: 0.6780 - accuracy: 0.5687 - val_loss: 0.6819 - val_accuracy: 0.6033\n","Epoch 9/100\n","8/8 [==============================] - 3s 332ms/step - loss: 0.6805 - accuracy: 0.5902 - val_loss: 0.6806 - val_accuracy: 0.6033\n","Epoch 10/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.6705 - accuracy: 0.5658 - val_loss: 0.6773 - val_accuracy: 0.6067\n","Epoch 11/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.6758 - accuracy: 0.5867 - val_loss: 0.6730 - val_accuracy: 0.6167\n","Epoch 12/100\n","8/8 [==============================] - 3s 325ms/step - loss: 0.6544 - accuracy: 0.6504 - val_loss: 0.6705 - val_accuracy: 0.6200\n","Epoch 13/100\n","8/8 [==============================] - 3s 336ms/step - loss: 0.6560 - accuracy: 0.6312 - val_loss: 0.6673 - val_accuracy: 0.6133\n","Epoch 14/100\n","8/8 [==============================] - 3s 332ms/step - loss: 0.6299 - accuracy: 0.6520 - val_loss: 0.6619 - val_accuracy: 0.6133\n","Epoch 15/100\n","8/8 [==============================] - 3s 325ms/step - loss: 0.6431 - accuracy: 0.6680 - val_loss: 0.6594 - val_accuracy: 0.6200\n","Epoch 16/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.6215 - accuracy: 0.6687 - val_loss: 0.6521 - val_accuracy: 0.6667\n","Epoch 17/100\n","8/8 [==============================] - 3s 331ms/step - loss: 0.6234 - accuracy: 0.6502 - val_loss: 0.6465 - val_accuracy: 0.6433\n","Epoch 18/100\n","8/8 [==============================] - 3s 330ms/step - loss: 0.6406 - accuracy: 0.6335 - val_loss: 0.6439 - val_accuracy: 0.6733\n","Epoch 19/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.5934 - accuracy: 0.7404 - val_loss: 0.6390 - val_accuracy: 0.6833\n","Epoch 20/100\n","8/8 [==============================] - 3s 328ms/step - loss: 0.5937 - accuracy: 0.7237 - val_loss: 0.6361 - val_accuracy: 0.6400\n","Epoch 21/100\n","8/8 [==============================] - 3s 325ms/step - loss: 0.5833 - accuracy: 0.7645 - val_loss: 0.6312 - val_accuracy: 0.6533\n","Epoch 22/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.5793 - accuracy: 0.7287 - val_loss: 0.6318 - val_accuracy: 0.6700\n","Epoch 23/100\n","8/8 [==============================] - 3s 325ms/step - loss: 0.5615 - accuracy: 0.7434 - val_loss: 0.6258 - val_accuracy: 0.6633\n","Epoch 24/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.5480 - accuracy: 0.7477 - val_loss: 0.6188 - val_accuracy: 0.6467\n","Epoch 25/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.5166 - accuracy: 0.8046 - val_loss: 0.6277 - val_accuracy: 0.6367\n","Epoch 26/100\n","8/8 [==============================] - 3s 331ms/step - loss: 0.5095 - accuracy: 0.8185 - val_loss: 0.6272 - val_accuracy: 0.6533\n","Epoch 27/100\n","8/8 [==============================] - 3s 330ms/step - loss: 0.4987 - accuracy: 0.7847 - val_loss: 0.6195 - val_accuracy: 0.6433\n","Epoch 28/100\n","8/8 [==============================] - 3s 330ms/step - loss: 0.4728 - accuracy: 0.8380 - val_loss: 0.6104 - val_accuracy: 0.6600\n","Epoch 29/100\n","8/8 [==============================] - 3s 334ms/step - loss: 0.4696 - accuracy: 0.7983 - val_loss: 0.6110 - val_accuracy: 0.6567\n","Epoch 30/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.4325 - accuracy: 0.8495 - val_loss: 0.6607 - val_accuracy: 0.6233\n","Epoch 31/100\n","8/8 [==============================] - 3s 327ms/step - loss: 0.4311 - accuracy: 0.8293 - val_loss: 0.6287 - val_accuracy: 0.6667\n","Epoch 32/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.4112 - accuracy: 0.8651 - val_loss: 0.6294 - val_accuracy: 0.6667\n","Epoch 33/100\n","8/8 [==============================] - 3s 337ms/step - loss: 0.3662 - accuracy: 0.8590 - val_loss: 0.6530 - val_accuracy: 0.6533\n","Epoch 34/100\n","8/8 [==============================] - 3s 335ms/step - loss: 0.3565 - accuracy: 0.8723 - val_loss: 0.7148 - val_accuracy: 0.6200\n","Epoch 35/100\n","8/8 [==============================] - 3s 328ms/step - loss: 0.3550 - accuracy: 0.8878 - val_loss: 0.6431 - val_accuracy: 0.6567\n","Epoch 36/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.2921 - accuracy: 0.9127 - val_loss: 0.6786 - val_accuracy: 0.6700\n","Epoch 37/100\n","8/8 [==============================] - 3s 323ms/step - loss: 0.2640 - accuracy: 0.9167 - val_loss: 0.6706 - val_accuracy: 0.6500\n","Epoch 38/100\n","8/8 [==============================] - 3s 330ms/step - loss: 0.2354 - accuracy: 0.9427 - val_loss: 0.6881 - val_accuracy: 0.6333\n","Epoch 39/100\n","8/8 [==============================] - 3s 335ms/step - loss: 0.2294 - accuracy: 0.9169 - val_loss: 0.7854 - val_accuracy: 0.6200\n","Epoch 40/100\n","8/8 [==============================] - 3s 327ms/step - loss: 0.3157 - accuracy: 0.8655 - val_loss: 0.7180 - val_accuracy: 0.6333\n","Epoch 41/100\n","8/8 [==============================] - 3s 336ms/step - loss: 0.1825 - accuracy: 0.9681 - val_loss: 1.0766 - val_accuracy: 0.5700\n","Epoch 42/100\n","8/8 [==============================] - 3s 328ms/step - loss: 0.4266 - accuracy: 0.8084 - val_loss: 0.6949 - val_accuracy: 0.6300\n","Epoch 43/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.1644 - accuracy: 0.9721 - val_loss: 0.7865 - val_accuracy: 0.6333\n","Epoch 44/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.1361 - accuracy: 0.9669 - val_loss: 0.7798 - val_accuracy: 0.6500\n","Epoch 45/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.1178 - accuracy: 0.9850 - val_loss: 0.8134 - val_accuracy: 0.6300\n","Epoch 46/100\n","8/8 [==============================] - 3s 334ms/step - loss: 0.1015 - accuracy: 0.9720 - val_loss: 0.8448 - val_accuracy: 0.6400\n","Epoch 47/100\n","8/8 [==============================] - 3s 324ms/step - loss: 0.0884 - accuracy: 0.9851 - val_loss: 0.8862 - val_accuracy: 0.6367\n","Epoch 48/100\n","8/8 [==============================] - 3s 336ms/step - loss: 0.1003 - accuracy: 0.9707 - val_loss: 0.9026 - val_accuracy: 0.6233\n","Epoch 49/100\n","8/8 [==============================] - 3s 324ms/step - loss: 0.0838 - accuracy: 0.9862 - val_loss: 0.9397 - val_accuracy: 0.6333\n","Epoch 50/100\n","8/8 [==============================] - 3s 331ms/step - loss: 0.0687 - accuracy: 0.9839 - val_loss: 0.9463 - val_accuracy: 0.6233\n","Epoch 51/100\n","8/8 [==============================] - 3s 335ms/step - loss: 0.0582 - accuracy: 0.9888 - val_loss: 0.9906 - val_accuracy: 0.6333\n","Epoch 52/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.0549 - accuracy: 0.9939 - val_loss: 1.0287 - val_accuracy: 0.6333\n","Epoch 53/100\n","8/8 [==============================] - 3s 336ms/step - loss: 0.0492 - accuracy: 0.9970 - val_loss: 1.0748 - val_accuracy: 0.6367\n","Epoch 54/100\n","8/8 [==============================] - 3s 327ms/step - loss: 0.0511 - accuracy: 0.9882 - val_loss: 1.0758 - val_accuracy: 0.6300\n","Epoch 55/100\n","8/8 [==============================] - 3s 328ms/step - loss: 0.0368 - accuracy: 0.9984 - val_loss: 1.1495 - val_accuracy: 0.6367\n","Epoch 56/100\n","8/8 [==============================] - 3s 336ms/step - loss: 0.0341 - accuracy: 0.9937 - val_loss: 1.1130 - val_accuracy: 0.6233\n","Epoch 57/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.0452 - accuracy: 0.9939 - val_loss: 1.2167 - val_accuracy: 0.6033\n","Epoch 58/100\n","8/8 [==============================] - 3s 327ms/step - loss: 0.0310 - accuracy: 0.9954 - val_loss: 1.1311 - val_accuracy: 0.6300\n","Epoch 59/100\n","8/8 [==============================] - 3s 329ms/step - loss: 0.0328 - accuracy: 0.9993 - val_loss: 1.1999 - val_accuracy: 0.6233\n","Epoch 60/100\n","8/8 [==============================] - 3s 324ms/step - loss: 0.0251 - accuracy: 0.9977 - val_loss: 1.2189 - val_accuracy: 0.6233\n","Epoch 61/100\n","8/8 [==============================] - 3s 331ms/step - loss: 0.0281 - accuracy: 0.9940 - val_loss: 1.2212 - val_accuracy: 0.6333\n","Epoch 62/100\n","8/8 [==============================] - 3s 325ms/step - loss: 0.0193 - accuracy: 0.9990 - val_loss: 1.2520 - val_accuracy: 0.6233\n","Epoch 63/100\n","8/8 [==============================] - 3s 328ms/step - loss: 0.0229 - accuracy: 0.9976 - val_loss: 1.2955 - val_accuracy: 0.6267\n","Epoch 64/100\n","8/8 [==============================] - 3s 321ms/step - loss: 0.0217 - accuracy: 0.9976 - val_loss: 1.3531 - val_accuracy: 0.6300\n","Epoch 65/100\n","8/8 [==============================] - 3s 324ms/step - loss: 0.0255 - accuracy: 0.9956 - val_loss: 1.3482 - val_accuracy: 0.6300\n","Epoch 66/100\n","8/8 [==============================] - 3s 325ms/step - loss: 0.0341 - accuracy: 0.9917 - val_loss: 1.2574 - val_accuracy: 0.6367\n","Epoch 67/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.0193 - accuracy: 0.9966 - val_loss: 1.3863 - val_accuracy: 0.6133\n","Epoch 68/100\n","8/8 [==============================] - 3s 324ms/step - loss: 0.0259 - accuracy: 0.9976 - val_loss: 1.4140 - val_accuracy: 0.6100\n","Epoch 69/100\n","8/8 [==============================] - 3s 330ms/step - loss: 0.0181 - accuracy: 1.0000 - val_loss: 1.4200 - val_accuracy: 0.6200\n","Epoch 70/100\n","8/8 [==============================] - 2s 319ms/step - loss: 0.0144 - accuracy: 0.9975 - val_loss: 1.4174 - val_accuracy: 0.6200\n","Epoch 71/100\n","8/8 [==============================] - 3s 325ms/step - loss: 0.0300 - accuracy: 0.9909 - val_loss: 1.2941 - val_accuracy: 0.6200\n","Epoch 72/100\n","8/8 [==============================] - 3s 322ms/step - loss: 0.0266 - accuracy: 0.9949 - val_loss: 1.4497 - val_accuracy: 0.6167\n","Epoch 73/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.0142 - accuracy: 0.9982 - val_loss: 1.4780 - val_accuracy: 0.6133\n","Epoch 74/100\n","8/8 [==============================] - 3s 330ms/step - loss: 0.0254 - accuracy: 0.9914 - val_loss: 1.4818 - val_accuracy: 0.6200\n","Epoch 75/100\n","8/8 [==============================] - 3s 320ms/step - loss: 0.0153 - accuracy: 1.0000 - val_loss: 1.5076 - val_accuracy: 0.6233\n","Epoch 76/100\n","8/8 [==============================] - 3s 319ms/step - loss: 0.0147 - accuracy: 1.0000 - val_loss: 1.5188 - val_accuracy: 0.6267\n","Epoch 77/100\n","8/8 [==============================] - 3s 323ms/step - loss: 0.0110 - accuracy: 0.9996 - val_loss: 1.6043 - val_accuracy: 0.6167\n","Epoch 78/100\n","8/8 [==============================] - 2s 324ms/step - loss: 0.0125 - accuracy: 1.0000 - val_loss: 1.6189 - val_accuracy: 0.6300\n","Epoch 79/100\n","8/8 [==============================] - 3s 323ms/step - loss: 0.0076 - accuracy: 1.0000 - val_loss: 1.6451 - val_accuracy: 0.6333\n","Epoch 80/100\n","8/8 [==============================] - 3s 319ms/step - loss: 0.0091 - accuracy: 1.0000 - val_loss: 1.6739 - val_accuracy: 0.6267\n","Epoch 81/100\n","8/8 [==============================] - 3s 331ms/step - loss: 0.0094 - accuracy: 1.0000 - val_loss: 1.6971 - val_accuracy: 0.6233\n","Epoch 82/100\n","8/8 [==============================] - 3s 322ms/step - loss: 0.0135 - accuracy: 0.9976 - val_loss: 1.6219 - val_accuracy: 0.6233\n","Epoch 83/100\n","8/8 [==============================] - 3s 337ms/step - loss: 0.0113 - accuracy: 1.0000 - val_loss: 1.6496 - val_accuracy: 0.6267\n","Epoch 84/100\n","8/8 [==============================] - 3s 335ms/step - loss: 0.0106 - accuracy: 1.0000 - val_loss: 1.6763 - val_accuracy: 0.6267\n","Epoch 85/100\n","8/8 [==============================] - 3s 332ms/step - loss: 0.0121 - accuracy: 0.9990 - val_loss: 1.7073 - val_accuracy: 0.6300\n","Epoch 86/100\n","8/8 [==============================] - 3s 340ms/step - loss: 0.0079 - accuracy: 1.0000 - val_loss: 1.6643 - val_accuracy: 0.6267\n","Epoch 87/100\n","8/8 [==============================] - 3s 342ms/step - loss: 0.0121 - accuracy: 1.0000 - val_loss: 1.7101 - val_accuracy: 0.6200\n","Epoch 88/100\n","8/8 [==============================] - 3s 336ms/step - loss: 0.0107 - accuracy: 1.0000 - val_loss: 1.7381 - val_accuracy: 0.6300\n","Epoch 89/100\n","8/8 [==============================] - 3s 336ms/step - loss: 0.0088 - accuracy: 1.0000 - val_loss: 1.7236 - val_accuracy: 0.6233\n","Epoch 90/100\n","8/8 [==============================] - 3s 333ms/step - loss: 0.0080 - accuracy: 0.9975 - val_loss: 1.7893 - val_accuracy: 0.6200\n","Epoch 91/100\n","8/8 [==============================] - 3s 326ms/step - loss: 0.0072 - accuracy: 1.0000 - val_loss: 1.7650 - val_accuracy: 0.6167\n","Epoch 92/100\n","8/8 [==============================] - 3s 324ms/step - loss: 0.0075 - accuracy: 1.0000 - val_loss: 1.8177 - val_accuracy: 0.6267\n","Epoch 93/100\n","8/8 [==============================] - 3s 337ms/step - loss: 0.0050 - accuracy: 1.0000 - val_loss: 1.8189 - val_accuracy: 0.6167\n","Epoch 94/100\n","8/8 [==============================] - 3s 332ms/step - loss: 0.0063 - accuracy: 0.9996 - val_loss: 1.7795 - val_accuracy: 0.6333\n","Epoch 95/100\n","8/8 [==============================] - 3s 333ms/step - loss: 0.0051 - accuracy: 1.0000 - val_loss: 1.7362 - val_accuracy: 0.6267\n","Epoch 96/100\n","8/8 [==============================] - 3s 350ms/step - loss: 0.0048 - accuracy: 1.0000 - val_loss: 1.7945 - val_accuracy: 0.6233\n","Epoch 97/100\n","8/8 [==============================] - 3s 336ms/step - loss: 0.0117 - accuracy: 1.0000 - val_loss: 1.7576 - val_accuracy: 0.6300\n","Epoch 98/100\n","8/8 [==============================] - 3s 332ms/step - loss: 0.0109 - accuracy: 1.0000 - val_loss: 1.7718 - val_accuracy: 0.6333\n","Epoch 99/100\n","8/8 [==============================] - 3s 331ms/step - loss: 0.0154 - accuracy: 0.9950 - val_loss: 1.7209 - val_accuracy: 0.6333\n","Epoch 100/100\n","8/8 [==============================] - 3s 332ms/step - loss: 0.0056 - accuracy: 1.0000 - val_loss: 1.7692 - val_accuracy: 0.6267\n"]}],"source":["def get_model(img_dim):\n","    model = Sequential()\n","    model.add(Conv2D(32, kernel_size=(2, 2), activation='relu', input_shape=(img_dim, img_dim, 3)))\n","    model.add(Conv2D(48, kernel_size=(2, 2), activation='relu'))\n","    model.add(Conv2D(120, kernel_size=(2, 2), activation='relu'))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","    model.add(Dropout(0.25))\n","    model.add(Flatten())\n","    model.add(Dense(128, activation='relu'))\n","    model.add(Dropout(0.25))\n","    model.add(Dense(64, activation='relu'))\n","    model.add(Dropout(0.4))\n","    model.add(Dense(num_classes, activation='sigmoid'))\n","    return model\n","\n","\n","model = get_model(img_dim)\n","\n","optimizer = optimizers.SGD(lr=0.002, decay=1e-6, momentum=0.9, nesterov=True)\n","# optimizer = optimizers.Adagrad(lr=0.01, epsilon=None, decay=0.0)\n","\n","model.compile(loss=keras.losses.categorical_crossentropy,\n","              optimizer=optimizer,\n","              metrics=['accuracy'])\n","history=model.fit(train_generator,validation_data=valid_generator, epochs=100, batch_size=32, verbose=1)"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":3151,"status":"ok","timestamp":1617972588409,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"l8K9ItdKp3N4","outputId":"caef5b10-703c-4b86-b398-3c8adb5f903d"},"outputs":[{"data":{"text/html":["\u003chtml\u003e\n","\u003chead\u003e\u003cmeta charset=\"utf-8\" /\u003e\u003c/head\u003e\n","\u003cbody\u003e\n","    \u003cdiv\u003e\n","            \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"\u003e\u003c/script\u003e\u003cscript type=\"text/javascript\"\u003eif (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\u003c/script\u003e\n","                \u003cscript type=\"text/javascript\"\u003ewindow.PlotlyConfig = {MathJaxConfig: 'local'};\u003c/script\u003e\n","        \u003cscript src=\"https://cdn.plot.ly/plotly-latest.min.js\"\u003e\u003c/script\u003e    \n","            \u003cdiv id=\"dace35bc-1891-4167-a82e-04a3b894ef19\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"\u003e\u003c/div\u003e\n","            \u003cscript type=\"text/javascript\"\u003e\n","                \n","                    window.PLOTLYENV=window.PLOTLYENV || {};\n","                    \n","                if (document.getElementById(\"dace35bc-1891-4167-a82e-04a3b894ef19\")) {\n","                    Plotly.newPlot(\n","                        'dace35bc-1891-4167-a82e-04a3b894ef19',\n","                        [{\"name\": \"Train\", \"type\": \"scatter\", \"y\": [0.6934041976928711, 0.6941729187965393, 0.6902841925621033, 0.6898838877677917, 0.6851508617401123, 0.680173933506012, 0.6807987689971924, 0.6766884922981262, 0.6701046228408813, 0.662826657295227, 0.6646289825439453, 0.6547078490257263, 0.6494092345237732, 0.6423685550689697, 0.6219920516014099, 0.6423758864402771, 0.6132607460021973, 0.6167219281196594, 0.5985880494117737, 0.5910940766334534, 0.5832274556159973, 0.5683907866477966, 0.555277943611145, 0.5442396402359009, 0.5152773857116699, 0.5056127309799194, 0.5005809664726257, 0.46779075264930725, 0.4410333037376404, 0.42397642135620117, 0.3842983543872833, 0.37768903374671936, 0.33382728695869446, 0.30256086587905884, 0.26990848779678345, 0.263855516910553, 0.24587973952293396, 0.24281977117061615, 0.2051330804824829, 0.15752868354320526, 0.17906925082206726, 0.13873809576034546, 0.13155357539653778, 0.12995415925979614, 0.10596531629562378, 0.07946377247571945, 0.0773317813873291, 0.13012397289276123, 0.10391858220100403, 0.05708280950784683, 0.04963573440909386, 0.04817241430282593, 0.04688229411840439, 0.04123935475945473, 0.038234878331422806, 0.03113805502653122, 0.0289793498814106, 0.03339599445462227, 0.029396584257483482, 0.026361830532550812, 0.033216994255781174, 0.02695176750421524, 0.019503550603985786, 0.020713280886411667, 0.018571047112345695, 0.015695374459028244, 0.01326649822294712, 0.011805526912212372, 0.014230182394385338, 0.012845370918512344, 0.01044304296374321, 0.011444768868386745, 0.027590841054916382, 0.026296040043234825, 0.020132798701524734, 0.0165408905595541, 0.02462722733616829, 0.026074742898344994, 0.01719757169485092, 0.017372367903590202, 0.009999535046517849, 0.012826569378376007, 0.013906644657254219, 0.010692876763641834, 0.013968522660434246, 0.012596582993865013, 0.012550867162644863, 0.011405392549932003, 0.0091661736369133, 0.005800669547170401, 0.006609425414353609, 0.004006218630820513, 0.008810721337795258, 0.007042087614536285, 0.013815394602715969, 0.009298658929765224, 0.010596699081361294, 0.006560833193361759, 0.005151534453034401, 0.0034769419580698013]}, {\"name\": \"Valid\", \"type\": \"scatter\", \"y\": [0.6964536309242249, 0.6933742761611938, 0.6911849975585938, 0.6960256099700928, 0.6965869665145874, 0.6860084533691406, 0.7003667950630188, 0.6849858164787292, 0.6795783042907715, 0.6784471273422241, 0.6757247447967529, 0.6761608123779297, 0.7006750702857971, 0.6875567436218262, 0.6738542318344116, 0.6696905493736267, 0.6687723398208618, 0.6681907773017883, 0.6734488606452942, 0.6676071286201477, 0.6718322038650513, 0.6822712421417236, 0.6793074011802673, 0.6783261299133301, 0.7075197100639343, 0.6945950388908386, 0.7514256238937378, 0.7095985412597656, 0.7514038681983948, 0.7281560301780701, 0.7578555941581726, 0.781981885433197, 0.7889355421066284, 0.9047608375549316, 0.8690891265869141, 0.8643627762794495, 0.8959799408912659, 1.0106875896453857, 0.9990195631980896, 1.0623403787612915, 1.088013768196106, 1.1778773069381714, 1.1339532136917114, 1.1895959377288818, 1.2663136720657349, 1.542799949645996, 1.556420087814331, 1.306992769241333, 1.4567373991012573, 1.6691384315490723, 1.616023063659668, 1.7171051502227783, 1.7680140733718872, 1.914200782775879, 1.784846305847168, 1.9031203985214233, 2.0589704513549805, 1.8869508504867554, 2.0764055252075195, 2.142836809158325, 2.1799306869506836, 2.12338924407959, 2.216942548751831, 2.289029836654663, 2.335981845855713, 2.2557222843170166, 2.3175835609436035, 2.478152275085449, 2.3937387466430664, 2.5561840534210205, 2.476318836212158, 2.5719122886657715, 2.251680850982666, 2.048459768295288, 2.2932662963867188, 2.3335154056549072, 1.9842469692230225, 2.0202012062072754, 2.751000165939331, 2.4818520545959473, 2.554849863052368, 2.427980661392212, 2.480125904083252, 2.4107391834259033, 2.233043909072876, 2.5927984714508057, 2.7044057846069336, 2.8325889110565186, 2.785780429840088, 2.857116460800171, 2.936516046524048, 2.9951651096343994, 2.669830083847046, 2.9291129112243652, 2.5679571628570557, 2.8305881023406982, 2.5876080989837646, 3.095785617828369, 3.135685443878174, 3.131728172302246]}],\n","                        {\"height\": 500, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Loss for train\"}, \"width\": 700, \"xaxis\": {\"title\": {\"text\": \"Epoch\"}}, \"yaxis\": {\"title\": {\"text\": \"val_loss\"}}},\n","                        {\"responsive\": true}\n","                    ).then(function(){\n","                            \n","var gd = document.getElementById('dace35bc-1891-4167-a82e-04a3b894ef19');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })\n","                };\n","                \n","            \u003c/script\u003e\n","        \u003c/div\u003e\n","\u003c/body\u003e\n","\u003c/html\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"},{"data":{"text/html":["\u003chtml\u003e\n","\u003chead\u003e\u003cmeta charset=\"utf-8\" /\u003e\u003c/head\u003e\n","\u003cbody\u003e\n","    \u003cdiv\u003e\n","            \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"\u003e\u003c/script\u003e\u003cscript type=\"text/javascript\"\u003eif (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\u003c/script\u003e\n","                \u003cscript type=\"text/javascript\"\u003ewindow.PlotlyConfig = {MathJaxConfig: 'local'};\u003c/script\u003e\n","        \u003cscript src=\"https://cdn.plot.ly/plotly-latest.min.js\"\u003e\u003c/script\u003e    \n","            \u003cdiv id=\"4cbb7bcc-2573-4907-8ae3-597c1a31c6d7\" class=\"plotly-graph-div\" style=\"height:500px; width:700px;\"\u003e\u003c/div\u003e\n","            \u003cscript type=\"text/javascript\"\u003e\n","                \n","                    window.PLOTLYENV=window.PLOTLYENV || {};\n","                    \n","                if (document.getElementById(\"4cbb7bcc-2573-4907-8ae3-597c1a31c6d7\")) {\n","                    Plotly.newPlot(\n","                        '4cbb7bcc-2573-4907-8ae3-597c1a31c6d7',\n","                        [{\"name\": \"Train\", \"type\": \"scatter\", \"y\": [0.48899999260902405, 0.5, 0.5299999713897705, 0.5379999876022339, 0.5550000071525574, 0.5699999928474426, 0.5690000057220459, 0.5659999847412109, 0.6029999852180481, 0.6200000047683716, 0.6050000190734863, 0.6140000224113464, 0.6309999823570251, 0.6370000243186951, 0.6710000038146973, 0.6269999742507935, 0.6890000104904175, 0.6710000038146973, 0.7020000219345093, 0.6980000138282776, 0.7129999995231628, 0.7289999723434448, 0.7229999899864197, 0.7540000081062317, 0.7609999775886536, 0.7789999842643738, 0.7590000033378601, 0.8069999814033508, 0.8119999766349792, 0.8299999833106995, 0.8629999756813049, 0.8560000061988831, 0.8769999742507935, 0.8930000066757202, 0.9129999876022339, 0.9150000214576721, 0.9229999780654907, 0.9079999923706055, 0.9309999942779541, 0.9539999961853027, 0.9480000138282776, 0.9559999704360962, 0.9589999914169312, 0.9610000252723694, 0.9729999899864197, 0.9890000224113464, 0.9800000190734863, 0.9589999914169312, 0.9760000109672546, 0.9929999709129333, 0.9890000224113464, 0.9860000014305115, 0.9909999966621399, 0.9940000176429749, 0.9950000047683716, 0.9929999709129333, 0.9940000176429749, 0.9919999837875366, 0.9950000047683716, 0.9959999918937683, 0.9909999966621399, 0.9929999709129333, 0.9980000257492065, 0.9950000047683716, 0.996999979019165, 0.996999979019165, 0.9990000128746033, 0.9990000128746033, 0.996999979019165, 0.9990000128746033, 0.9990000128746033, 0.9990000128746033, 0.9940000176429749, 0.9929999709129333, 0.9950000047683716, 0.9980000257492065, 0.9919999837875366, 0.9950000047683716, 0.9990000128746033, 0.996999979019165, 1.0, 0.996999979019165, 0.996999979019165, 0.9980000257492065, 0.9980000257492065, 0.9990000128746033, 0.9959999918937683, 0.9959999918937683, 0.9980000257492065, 1.0, 0.9990000128746033, 1.0, 0.996999979019165, 1.0, 0.9940000176429749, 0.9990000128746033, 0.9959999918937683, 0.9990000128746033, 1.0, 1.0]}, {\"name\": \"Valid\", \"type\": \"scatter\", \"y\": [0.47749999165534973, 0.47749999165534973, 0.5174999833106995, 0.48249998688697815, 0.48750001192092896, 0.5899999737739563, 0.48500001430511475, 0.5600000023841858, 0.5874999761581421, 0.5849999785423279, 0.6025000214576721, 0.5849999785423279, 0.5325000286102295, 0.5724999904632568, 0.6000000238418579, 0.6200000047683716, 0.6324999928474426, 0.612500011920929, 0.5975000262260437, 0.6399999856948853, 0.6399999856948853, 0.5975000262260437, 0.6200000047683716, 0.6399999856948853, 0.5874999761581421, 0.6349999904632568, 0.5575000047683716, 0.6100000143051147, 0.5824999809265137, 0.6050000190734863, 0.6050000190734863, 0.6050000190734863, 0.6075000166893005, 0.5799999833106995, 0.6075000166893005, 0.6025000214576721, 0.6150000095367432, 0.5799999833106995, 0.5975000262260437, 0.6025000214576721, 0.612500011920929, 0.6025000214576721, 0.5874999761581421, 0.5375000238418579, 0.5699999928474426, 0.5450000166893005, 0.5774999856948853, 0.5600000023841858, 0.5674999952316284, 0.5874999761581421, 0.5874999761581421, 0.6000000238418579, 0.5724999904632568, 0.5625, 0.5924999713897705, 0.5849999785423279, 0.5724999904632568, 0.5849999785423279, 0.5899999737739563, 0.5950000286102295, 0.5600000023841858, 0.5849999785423279, 0.5674999952316284, 0.574999988079071, 0.5649999976158142, 0.5774999856948853, 0.5674999952316284, 0.574999988079071, 0.5674999952316284, 0.5774999856948853, 0.5724999904632568, 0.574999988079071, 0.5699999928474426, 0.550000011920929, 0.5649999976158142, 0.5774999856948853, 0.5575000047683716, 0.574999988079071, 0.5425000190734863, 0.550000011920929, 0.5824999809265137, 0.5774999856948853, 0.5799999833106995, 0.574999988079071, 0.5724999904632568, 0.5874999761581421, 0.5774999856948853, 0.5849999785423279, 0.5799999833106995, 0.5724999904632568, 0.5724999904632568, 0.5674999952316284, 0.5724999904632568, 0.5699999928474426, 0.5425000190734863, 0.5525000095367432, 0.5849999785423279, 0.5600000023841858, 0.5674999952316284, 0.5799999833106995]}],\n","                        {\"height\": 500, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Accuracy for train\"}, \"width\": 700, \"xaxis\": {\"title\": {\"text\": \"Epoch\"}}, \"yaxis\": {\"title\": {\"text\": \"Accuracy\"}}},\n","                        {\"responsive\": true}\n","                    ).then(function(){\n","                            \n","var gd = document.getElementById('4cbb7bcc-2573-4907-8ae3-597c1a31c6d7');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })\n","                };\n","                \n","            \u003c/script\u003e\n","        \u003c/div\u003e\n","\u003c/body\u003e\n","\u003c/html\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"},{"data":{"text/plain":["\u003cFigure size 432x288 with 0 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["import plotly.graph_objects as go\n","import matplotlib.pyplot as plt\n","plt.clf()\n","fig = go.Figure()\n","fig.add_trace(go.Scatter(\n","                        y=history.history['loss'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_loss'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Loss for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='val_loss')\n","fig.show()\n","plt.clf()\n","fig = go.Figure()\n","\n","fig.add_trace(go.Scatter(\n","                        y=history.history['accuracy'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_accuracy'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Accuracy for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='Accuracy')\n","fig.show()"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":788},"executionInfo":{"elapsed":1605,"status":"error","timestamp":1617971617596,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"5d-pritFltsn","outputId":"7364b685-9aa3-421f-85b8-71ba1e8cf140"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n"]},{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-22-63a80682c1b7\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m history = model.fit(train_generator,validation_data=valid_generator, epochs=20, batch_size=32, class_weight=class_weights,\n\u001b[0;32m---\u003e 11\u001b[0;31m                     callbacks=callbacks_list)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    869\u001b[0m       \u001b[0;31m# This is the first call of __call__, so we have to initialize.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m       \u001b[0minitializers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 871\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_initialize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0madd_initializers_to\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitializers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    872\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m       \u001b[0;31m# At this point we know that the initialization is complete (or less\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_initialize\u001b[0;34m(self, args, kwds, add_initializers_to)\u001b[0m\n\u001b[1;32m    724\u001b[0m     self._concrete_stateful_fn = (\n\u001b[1;32m    725\u001b[0m         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access\n\u001b[0;32m--\u003e 726\u001b[0;31m             *args, **kwds))\n\u001b[0m\u001b[1;32m    727\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    728\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minvalid_creator_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0munused_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0munused_kwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_get_concrete_function_internal_garbage_collected\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2967\u001b[0m       \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2968\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2969\u001b[0;31m       \u001b[0mgraph_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_define_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2970\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2971\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_maybe_define_function\u001b[0;34m(self, args, kwargs)\u001b[0m\n\u001b[1;32m   3359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3360\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_function_cache\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmissed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcall_context_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 3361\u001b[0;31m           \u001b[0mgraph_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_graph_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_function_cache\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprimary\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcache_key\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3363\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_create_graph_function\u001b[0;34m(self, args, kwargs, override_flat_arg_shapes)\u001b[0m\n\u001b[1;32m   3204\u001b[0m             \u001b[0marg_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marg_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3205\u001b[0m             \u001b[0moverride_flat_arg_shapes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moverride_flat_arg_shapes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 3206\u001b[0;31m             capture_by_value=self._capture_by_value),\n\u001b[0m\u001b[1;32m   3207\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_function_attributes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3208\u001b[0m         \u001b[0mfunction_spec\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_spec\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mfunc_graph_from_py_func\u001b[0;34m(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\u001b[0m\n\u001b[1;32m    988\u001b[0m         \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moriginal_func\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_decorator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munwrap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpython_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    989\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 990\u001b[0;31m       \u001b[0mfunc_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpython_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfunc_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfunc_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    991\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    992\u001b[0m       \u001b[0;31m# invariant: `func_outputs` contains only Tensors, CompositeTensors,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36mwrapped_fn\u001b[0;34m(*args, **kwds)\u001b[0m\n\u001b[1;32m    632\u001b[0m             \u001b[0mxla_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mExit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    633\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 634\u001b[0;31m           \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mweak_wrapped_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__wrapped__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    635\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/func_graph.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    975\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint:disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    976\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ag_error_metadata\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 977\u001b[0;31m               \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_error_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    978\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    979\u001b[0m               \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:805 train_function  *\n        return step_function(self, iterator)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:795 step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/distribute/distribute_lib.py:1259 run\n        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/distribute/distribute_lib.py:2730 call_for_each_replica\n        return self._call_for_each_replica(fn, args, kwargs)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/distribute/distribute_lib.py:3417 _call_for_each_replica\n        return fn(*args, **kwargs)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:788 run_step  **\n        outputs = model.train_step(data)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:754 train_step\n        y_pred = self(x, training=True)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/base_layer.py:998 __call__\n        input_spec.assert_input_compatibility(self.input_spec, inputs, self.name)\n    /usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/input_spec.py:223 assert_input_compatibility\n        str(tuple(shape)))\n\n    ValueError: Input 0 of layer sequential_1 is incompatible with the layer: expected ndim=5, found ndim=4. Full shape received: (None, None, None, None)\n"]}],"source":["filepath = 'mel_saved_weights/'\n","checkpoint = ModelCheckpoint(\n","    filepath, monitor='loss', \n","    verbose=0,        \n","    save_best_only=True,        \n","    mode='min'\n",")    \n","callbacks_list = [checkpoint]     \n","\n","history = model.fit(train_generator,validation_data=valid_generator, epochs=20, batch_size=32, class_weight=class_weights,\n","                    callbacks=callbacks_list)"]},{"cell_type":"markdown","metadata":{"id":"rOk-xpdL-2ji"},"source":["#Using keras tuner\n","https://www.tensorflow.org/tutorials/keras/keras_tuner"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7JDtb0raX-1S"},"outputs":[],"source":["def model_builder(hp):\n","    model = keras.Sequential()\n","    model.add(keras.layers.InputLayer(input_shape=(img_dim,img_dim,3)))\n","\n","    # Tune the number of units in the first Dense layer\n","    # Choose an optimal value between 32-512\n","    hp_units = hp.Int('units', min_value=32, max_value=512, step=128)\n","    model.add(tf.keras.layers.Conv2D(32, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.25))\n","    model.add(tf.keras.layers.Conv2D(32, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.25))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","    model.add(tf.keras.layers.Conv2D(64, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(64, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.25))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","    model.add(tf.keras.layers.Flatten())\n","    model.add(tf.keras.layers.Dropout(rate=0.5))#Add fully connected layer.\n","    model.add(tf.keras.layers.Dense(64))\n","    model.add(tf.keras.layers.Activation('relu'))\n","\n","    model.add(tf.keras.layers.Dropout(0.5))\n","    model.add(tf.keras.layers.Dense(units=hp_units, activation='relu'))\n","    model.add(tf.keras.layers.Dense(num_classes, activation='sigmoid', name='category_output'))\n","    metrics_array=['accuracy',f1_m,precision_m,recall_m]\n","    loss_array = custom_hamming_loss\n","\n","    # Tune the learning rate for the optimizer\n","    # Choose an optimal value from 0.01, 0.001, or 0.0001\n","    hp_learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])\n","\n","    model.compile(optimizer=keras.optimizers.Adam(learning_rate=hp_learning_rate),\n","                  loss = [custom_hamming_loss,f1_loss],\n","                  metrics =['accuracy',f1_m,precision_m,recall_m],)\n","    #print(model.summary())\n","    return model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ms3EftiEksf3"},"outputs":[],"source":["def model_builder2(hp):\n","    model = keras.Sequential()\n","    model.add(keras.layers.InputLayer(input_shape=(img_dim,img_dim,3)))\n","\n","    # Tune the number of units in the first Dense layer\n","    # Choose an optimal value between 32-5m12\n","    hp_units = hp.Int('units', min_value=32, max_value=512, step=128)\n","    model.add(tf.keras.layers.Conv2D(32, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(32, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.25))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","\n","    model.add(tf.keras.layers.Conv2D(64, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(64, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    model.add(tf.keras.layers.Conv2D(128, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(128, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    \n","    model.add(tf.keras.layers.Conv2D(256, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(256, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    model.add(tf.keras.layers.Conv2D(256, (3, 3), padding = 'same'))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Conv2D(256, (3, 3)))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.MaxPooling2D(pool_size = (2, 2)))\n","\n","    model.add(tf.keras.layers.Flatten())\n","    model.add(tf.keras.layers.Dense(2048))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.5))\n","    model.add(tf.keras.layers.Dense(2048))\n","    model.add(tf.keras.layers.Activation('relu'))\n","    model.add(tf.keras.layers.Dropout(0.5))\n","\n","    model.add(tf.keras.layers.Dense(units=hp_units, activation='relu'))\n","    model.add(tf.keras.layers.Dense(num_classes, activation='sigmoid', name='category_output'))\n","    metrics_array=['accuracy',f1_m,precision_m,recall_m]\n","    loss_array = custom_hamming_loss\n","\n","    # Tune the learning rate for the optimizer\n","    # Choose an optimal value from 0.01, 0.001, or 0.0001\n","    hp_learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])\n","\n","    model.compile(optimizer=keras.optimizers.Adam(learning_rate=hp_learning_rate),\n","                  loss = [custom_hamming_loss,f1_loss],\n","                  metrics =metrics_array,)\n","    print(model.summary())\n","    return model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Cm0iDEVtYDGc"},"outputs":[],"source":["tuner = kt.Hyperband(model_builder,\n","                     objective='val_accuracy',\n","                     max_epochs=15,\n","                     factor=3,\n","                     directory='audio_dir2',\n","                     project_name='audio_model2')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":475},"executionInfo":{"elapsed":344126,"status":"error","timestamp":1616930306853,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"V6Dd8ggzZiOn","outputId":"f9973773-494e-477e-c0c2-76b1b43a834f"},"outputs":[{"data":{"text/html":["\u003cspan style=\"color:#4527A0\"\u003e\u003ch1 style=\"font-size:18px\"\u003eStarting new trial\u003c/h1\u003e\u003c/span\u003e"],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Epoch 1/2\n","50/62 [=======================\u003e......] - ETA: 1:11 - loss: 11.3292 - accuracy: 0.6130 - f1_m: 0.6273 - precision_m: 0.6212 - recall_m: 0.6361"]},{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-22-6a6b39da72a6\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgenerator_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m                     \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mSTEP_SIZE_VALID\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 10\u001b[0;31m                     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstop_early\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m                     )\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/kerastuner/engine/base_tuner.py\u001b[0m in \u001b[0;36msearch\u001b[0;34m(self, *fit_args, **fit_kwargs)\u001b[0m\n\u001b[1;32m    130\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_trial_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 132\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_trial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mfit_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_trial_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_search_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/kerastuner/tuners/hyperband.py\u001b[0m in \u001b[0;36mrun_trial\u001b[0;34m(self, trial, *fit_args, **fit_kwargs)\u001b[0m\n\u001b[1;32m    350\u001b[0m             \u001b[0mfit_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'epochs'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'tuner/epochs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m             \u001b[0mfit_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'initial_epoch'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'tuner/initial_epoch'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 352\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mHyperband\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_trial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mfit_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    353\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    354\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_build_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/kerastuner/engine/multi_execution_tuner.py\u001b[0m in \u001b[0;36mrun_trial\u001b[0;34m(self, trial, *fit_args, **fit_kwargs)\u001b[0m\n\u001b[1;32m     96\u001b[0m             self._on_train_begin(model, trial.hyperparameters,\n\u001b[1;32m     97\u001b[0m                                  *fit_args, **copied_fit_kwargs)\n\u001b[0;32m---\u003e 98\u001b[0;31m             \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfit_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcopied_fit_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     99\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_values\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moracle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobjective\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdirection\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'min'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-\u003e 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-\u003e 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---\u003e 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# Fit the model\n","STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size\n","STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size\n"," \t\n","stop_early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\n","tuner.search(generator_wrapper(train_generator),\n","                    steps_per_epoch=STEP_SIZE_TRAIN,\n","                    validation_data=generator_wrapper(valid_generator),\n","                    validation_steps=STEP_SIZE_VALID,\n","                    epochs=15, callbacks=[stop_early],\n","                    )\n","\n","# Get the optimal hyperparameters\n","best_hps=tuner.get_best_hyperparameters(num_trials=1)[0]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OztWW4WQnprG"},"outputs":[],"source":["# Build the model with the optimal hyperparameters and train it on the data for 50 epochs\n","model = tuner.hypermodel.build(best_hps)\n","history = model.fit(generator_wrapper(train_generator),\n","                    steps_per_epoch=STEP_SIZE_TRAIN,\n","                    validation_data=generator_wrapper(valid_generator),\n","                    validation_steps=STEP_SIZE_VALID,\n","                    epochs=30, callbacks=[stop_early],\n","                    )\n","\n","val_acc_per_epoch = history.history['val_accuracy']\n","best_epoch = val_acc_per_epoch.index(max(val_acc_per_epoch)) + 1\n","print('Best epoch: %d' % (best_epoch,))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cORWP_pmZbZb"},"outputs":[],"source":["from keras import models\n","import matplotlib.image as mpimg\n","import numpy as np\n","from keras.preprocessing import image\n","import imageio as im\n","layer_outputs = [layer.output for layer in model.layers[1:]] \n","# Extracts the outputs of the layers\n","activation_model = models.Model(inputs=model.input, outputs=layer_outputs) \n","# Creates a model that will return these outputs, given the model input\n","img_path = 'AudioVisualizedDataset/9013.jpg'\n","img = image.load_img(img_path, target_size=(img_dim, img_dim))\n","img_tensor = image.img_to_array(img)\n","img_tensor = np.expand_dims(img_tensor, axis=0)\n","activations = activation_model.predict(img_tensor)\n","plt.imshow(img)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GpHtSCXjoEnu"},"outputs":[],"source":["import plotly.graph_objects as go\n","import matplotlib.pyplot as plt\n","plt.clf()\n","fig = go.Figure()\n","fig.add_trace(go.Scatter(\n","                        y=history.history['loss'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_loss'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Loss for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='val_loss')\n","fig.show()\n","plt.clf()\n","fig = go.Figure()\n","\n","fig.add_trace(go.Scatter(\n","                        y=history.history['accuracy'],\n","                        name='Train'))\n","fig.add_trace(go.Scatter(\n","                        y=history.history['val_accuracy'],\n","                        name='Valid'))\n","fig.update_layout(height=500, \n","                      width=700,\n","                      title='Accuracy for train',\n","                      xaxis_title='Epoch',\n","                      yaxis_title='Accuracy')\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1651,"status":"ok","timestamp":1616258261590,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"TPp82bsFv4Pp","outputId":"22c36f59-f77c-40b0-a320-b3165656dd69"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 112 validated image filenames.\n"]}],"source":["\n","test_generator=test_datagen.flow_from_dataframe(\n","    dataframe=df[1000:],\n","    directory=\"AudioVisualizedDataset\",\n","    x_col=\"ID_Frame\",\n","    color_mode=\"rgb\",\n","    batch_size=1,\n","    seed=42,\n","    shuffle=False,\n","    class_mode=None,\n","    target_size=(img_dim,img_dim))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2186,"status":"ok","timestamp":1616258262130,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"U3ZwIh_dwBDl","outputId":"177c293f-7429-44dc-eaa6-fc2ec1d723c8"},"outputs":[{"name":"stdout","output_type":"stream","text":["112/112 [==============================] - 1s 6ms/step\n"]}],"source":["STEP_SIZE_TEST=test_generator.n//test_generator.batch_size\n","test_generator.reset()\n","pred=model.predict(test_generator,\n","    steps=STEP_SIZE_TEST,\n","    verbose=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IBN5Ce2zwGmx"},"outputs":[],"source":["print(pred)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3RQUF1V_wHtc"},"outputs":[],"source":["pred_bool = (pred \u003e0.3)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZBZDLBJIwNpD"},"outputs":[],"source":["predictions = pred_bool.astype(int)\n","\n","#columns should be the same order of y_col\n","results=pd.DataFrame(predictions, columns=main_genre)\n","results[\"Filenames\"]=test_generator.filenames\n","ordered_cols=[\"Filenames\"]+main_genre\n","results=results[ordered_cols]#To get the same column order\n","results.to_csv(\"results.csv\",index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":519,"status":"ok","timestamp":1616256890629,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"iE0bbrUBwWhw","outputId":"a11e3155-1dae-41a7-fb81-ca97e0d71cf6"},"outputs":[{"name":"stdout","output_type":"stream","text":["['Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action']\n"]}],"source":["predictions=[]\n","for row in pred_bool:\n","    l=[]\n","    for index,cls in enumerate(row):\n","        if cls:\n","            l.append(main_genre[index])\n","    predictions.append(\",\".join(l))\n","print(predictions)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1560,"status":"ok","timestamp":1616256894429,"user":{"displayName":"Irmak Türköz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBKugg3AwKzSGhYpyiD5vdS8SCH9E9MnMIsAWQ=s64","userId":"13125594217489508006"},"user_tz":-180},"id":"QD1Yj1z7wY-A","outputId":"e2756ac1-b5c8-48ed-a49f-4bbef2c68288"},"outputs":[{"name":"stdout","output_type":"stream","text":["Truths [[\"['Horror']\"], [\"['Adventure', 'Action']\"], [\"['Romance']\"], [\"['Comedy', 'Action']\"], [\"['Comedy', 'Romance']\"], [\"['Adventure', 'Action']\"], [\"['Action']\"], [\"['Romance']\"], [\"['Comedy', 'Romance']\"], [\"['Action', 'Adventure', 'Fantasy']\"], [\"['Action']\"], [\"['Action']\"], [\"['Adventure']\"], [\"['Action']\"], [\"['Horror']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Action']\"], [\"['Adventure', 'Action']\"], [\"['Romance']\"], [\"['Comedy', 'Romance']\"], [\"['Action']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Romance', 'Adventure', 'Action']\"], [\"['Horror']\"], [\"['Comedy', 'Romance']\"], [\"['Adventure', 'Action']\"], [\"['Comedy', 'Action']\"], [\"['Adventure']\"], [\"['Comedy', 'Horror']\"], [\"['Action']\"], [\"['Horror']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Romance', 'Adventure']\"], [\"['Action']\"], [\"['Action']\"], [\"['Adventure', 'Fantasy']\"], [\"['Comedy', 'Action', 'Adventure', 'Fantasy']\"], [\"['Fantasy', 'Horror']\"], [\"['Comedy', 'Adventure', 'Fantasy']\"], [\"['Comedy', 'Horror']\"], [\"['Romance']\"], [\"['Adventure', 'Action']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Fantasy']\"], [\"['Action', 'Horror']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Horror']\"], [\"['Horror']\"], [\"['Action']\"], [\"['Action']\"], [\"['Comedy', 'Horror']\"], [\"['Horror']\"], [\"['Comedy', 'Action']\"], [\"['Horror']\"], [\"['Comedy', 'Action', 'Horror']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Action']\"], [\"['Horror']\"], [\"['Action', 'Fantasy']\"], [\"['Comedy', 'Fantasy']\"], [\"['Romance']\"], [\"['Action']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Romance']\"], [\"['Comedy', 'Action']\"], [\"['Horror']\"], [\"['Romance']\"], [\"['Romance']\"], [\"['Horror']\"], [\"['Adventure', 'Action']\"], [\"['Horror']\"], [\"['Action']\"], [\"['Adventure', 'Fantasy']\"], [\"['Comedy', 'Adventure', 'Action']\"], [\"['Romance']\"], [\"['Adventure', 'Fantasy']\"], [\"['Comedy', 'Romance']\"], [\"['Romance']\"], [\"['Action']\"], [\"['Action']\"], [\"['Romance']\"], [\"['Action']\"], [\"['Romance']\"], [\"['Action']\"], [\"['Action']\"], [\"['Comedy', 'Romance']\"], [\"['Adventure', 'Action']\"], [\"['Comedy', 'Romance']\"], [\"['Action', 'Adventure', 'Fantasy']\"], [\"['Action']\"], [\"['Horror']\"], [\"['Romance']\"], [\"['Action']\"], [\"['Action']\"], [\"['Romance']\"], [\"['Action', 'Adventure', 'Fantasy']\"], [\"['Horror']\"], [\"['Romance']\"], [\"['Adventure']\"], [\"['Adventure', 'Action']\"], [\"['Horror']\"], [\"['Action']\"], [\"['Comedy', 'Action']\"], [\"['Action']\"], [\"['Horror']\"], [\"['Comedy', 'Horror']\"], [\"['Horror']\"], [\"['Action']\"], [\"['Fantasy']\"], [\"['Action']\"], [\"['Romance']\"]]\n","Predictions ['Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action', 'Adventure,Romance,Action,Horror', 'Adventure,Romance,Action']\n"]}],"source":["def load_name(csv_path,id):\n","    df= pd.read_csv(csv_path)\n","    ids = df['movieId']\n","    return (df.loc[ids == id])['title'].values.tolist()\n","def load_label(csv_path,id):\n","    df= pd.read_csv(csv_path)\n","    ids = df['ID_Frame']\n","    genres_str = (df.loc[ids == id])['Genres_subset'].values.tolist()\n","    if genres_str:\n","        genres = genres_str[0].split('|')\n","        return genres\n","    else:\n","        return []\n","true_labels = []\n","for i,j in enumerate(test_generator.filenames):\n","    true_labels.append(load_label(\"latest_statistics.csv\",int(j.split('.jpg')[0])))\n","filenames=test_generator.filenames\n","results=pd.DataFrame({\"Filename\":filenames,\n","                      \"Predictions\":predictions,\n","                      \"TrueLabels\":true_labels})\n","results.to_csv(\"results.csv\",index=False)\n","from sklearn.metrics import confusion_matrix\n","print(\"Truths\",true_labels)\n","print(\"Predictions\",predictions)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bLvAGD6kwlSX"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"5m9etz0ED6LY"},"source":["# Not used\n","\n","https://www.kaggle.com/carlolepelaars/bidirectional-lstm-for-audio-labeling-with-keras"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ekw0ABeBC7Tv"},"outputs":[],"source":["sr = 44100 # Sampling rate\n","duration = 5\n","hop_length = 347 # to make time steps 128\n","fmin = 20\n","fmax = sr // 2\n","n_mels = 128\n","n_fft = n_mels * 20\n","samples = sr * duration\n","def read_audio(path):\n","    '''\n","    Reads in the audio file and returns\n","    an array that we can turn into a melspectogram\n","    '''\n","    y, _ = librosa.core.load(path, sr=44100)\n","    # trim silence\n","    if 0 \u003c len(y): # workaround: 0 length causes error\n","        y, _ = librosa.effects.trim(y)\n","    if len(y) \u003e samples: # long enough\n","        y = y[0:0+samples]\n","    else: # pad blank\n","        padding = samples - len(y)\n","        offset = padding // 2\n","        y = np.pad(y, (offset, samples - len(y) - offset), 'constant')\n","    return y\n","def audio_to_melspectrogram(audio):\n","    '''\n","    Convert to melspectrogram after audio is read in\n","    '''\n","    spectrogram = librosa.feature.melspectrogram(audio, \n","                                                 sr=sr,\n","                                                 n_mels=n_mels,\n","                                                 hop_length=hop_length,\n","                                                 n_fft=n_fft,\n","                                                 fmin=fmin,\n","                                                 fmax=fmax)\n","    return librosa.power_to_db(spectrogram).astype(np.float32)\n","\n","def read_as_melspectrogram(path):\n","    '''\n","    Convert audio into a melspectrogram \n","    so we can use machine learning\n","    '''\n","    mels = audio_to_melspectrogram(read_audio(path))\n","    return mels\n","\n","def convert_wav_to_image(df, path):\n","    X = []\n","    for _,row in df.iterrows():\n","        if os.path.exists('AudioDataset/'+str(row['ID_Frame'])):\n","            x = read_as_melspectrogram('AudioDataset/'+str(row['ID_Frame']))\n","\n","            X.append(x.transpose())\n","        else:\n","            print('couldnt find audio. skipping to next.', str(row['ID_Frame']))\n","    return X\n","\n","audio_dest='AudioDataset'\n","imgs_dest ='AudioVisualizedDataset'\n","audios = os.listdir('AudioDataset')\n","destination = os.listdir('AudioVisualizedDataset')\n","\n","fig, ax = plt.subplots()\n","for audio in audios:\n","    id = audio.split('.mp3')[0]\n","    if id not in imgs:\n","        print(\"Doing file_id\", id)\n","        converted_image = read_as_melspectrogram(audio_dest+'/'+audio)\n","        cv2.imwrite(imgs_dest+'/'+id+'.jpg', converted_image) \n","\n","print(\"Done.\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oVnnl1HSJXSF"},"outputs":[],"source":["def normalize(img):\n","    '''\n","    Normalizes an array \n","    (subtract mean and divide by standard deviation)\n","    '''\n","    eps = 0.001\n","    if np.std(img) != 0:\n","        img = (img - np.mean(img)) / np.std(img)\n","    else:\n","        img = (img - np.mean(img)) / eps\n","    return img\n","\n","def normalize_dataset(X):\n","    '''\n","    Normalizes list of arrays\n","    (subtract mean and divide by standard deviation)\n","    '''\n","    normalized_dataset = []\n","    for img in X:\n","        normalized = normalize(img)\n","        normalized_dataset.append(normalized)\n","    return normalized_dataset\n","#convert_wav_to_image(df,'AudioDataset')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kY5jAHDM4cug"},"outputs":[],"source":["\n","#from pydub import AudioSegment\n","def decode_audio(audio_binary):\n","    sound = AudioSegment.from_mp3(audio_binary)\n","    sound.export(audio_binary, format=\"wav\")\n","    audio, _ = tf.audio.decode_wav(sound)\n","    return tf.squeeze(audio, axis=-1)\n","def load_label(csv_path,id):\n","    df= pd.read_csv(csv_path)\n","    ids = df['ID_Frame']\n","    print(ids)\n","    genres_str = (df.loc[ids == id])['Genres_subset'].values.tolist()\n","    if genres_str:\n","        genres = genres_str[0].split('|')\n","        return genres\n","    else:\n","        return []\n","def get_waveform_and_label(csv_path,file_path):\n","    video_id = (file_path.split('.mp3')[0]).split('/')[0]\n","    label = load_label(csv_path,video_id)\n","    waveform = decode_audio(audio_binary)\n","    return waveform, label\n","#get_waveform_and_label(\"latest_statistics_audio.csv\",'AudioDataset/4708.mp3')"]},{"cell_type":"markdown","metadata":{"id":"yn4IdNxSVogU"},"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyP9O17FKmYQjiipTmU1IJAk","collapsed_sections":[],"name":"Audio MEL_MultiClassMultiOutput","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}